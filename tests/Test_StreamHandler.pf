module Test_StreamHandler_mod
   use pFUnit_mod
   use ASTG_SeverityLevels_mod
   use ASTG_StreamHandler_mod
   use ASTG_LogRecord_mod
   implicit none

@TestCase
   type, extends(TestCase) :: Test_StreamHandler
      integer :: unit
   contains
      procedure :: setUp   
      procedure :: tearDown 
   end type Test_StreamHandler

contains

   
   subroutine setUp(this)
      class (Test_StreamHandler), intent(inout) :: this

      open(newunit=this%unit, file='testStreamHandler.txt', form='formatted', &
           status='new')

   end subroutine setUp

   
   subroutine tearDown(this)
      class (Test_StreamHandler), intent(inout) :: this

      close(this%unit, status='delete')

   end subroutine tearDown

   
@Test
   subroutine test_handleBasic(this)
      class (Test_StreamHandler), intent(inout) :: this
      type (StreamHandler) :: handler
      character(len=32) :: foundMessage

      handler = StreamHandler(unit=this%unit)
      call handler%setLevel(INFO)
      call handler%handle(LogRecord(name='name', message='hello', level=INFO))

      rewind(this%unit)
      read(this%unit,'(a)') foundMessage
      
      @assertEqual('INFO: hello', foundMessage)

   end subroutine test_handleBasic

@Test
   subroutine test_emitBasicWithFormat(this)
      use FTL_XWrapVec_mod
      use ASTG_Formatter_mod
      class (Test_StreamHandler), intent(inout) :: this
      type (StreamHandler) :: handler
      character(len=32) :: foundMessage

      type (LogRecord) :: record
      type(Formatter) :: fmt
      type (XWrapVec) :: args
      
      args = XWrapVec()
      call args%push_back_alt(1)

      ! Create a logging format
      fmt = Formatter('%(name:a) %(message:a)')

      handler = StreamHandler(unit=this%unit)
      call handler%setFormatter(fmt)
      record = LogRecord('A', INFO, 'Goodbye %i1.1', args=args)
      call handler%handle(record)
      
      rewind(this%unit)
      read(this%unit,'(a)') foundMessage
      @assertEqual('INFO: '//record%getMessage(), foundMessage)
      
   end subroutine test_emitBasicWithFormat

   
@Test
   subroutine test_handleBelowThreshold(this)
      use iso_fortran_env, only: IOSTAT_END
      class (Test_StreamHandler), intent(inout) :: this

      type (StreamHandler) :: handler
      character(len=32) :: foundMessage
      integer :: iostatus
      
      handler = StreamHandler(unit=this%unit)
      call handler%setLevel(INFO)
      call handler%handle(LogRecord('name', DEBUG, 'hello'))

      rewind(this%unit)
      read(this%unit,'(a)', IOSTAT=iostatus) foundMessage
      
      @assertEqual(IOSTAT_END, iostatus)

   end subroutine test_handleBelowThreshold

   
@Test
   subroutine test_handleAboveThreshold(this)
      class (Test_StreamHandler), intent(inout) :: this

      type (StreamHandler) :: handler
      character(len=32) :: foundMessage

      handler = StreamHandler(unit=this%unit)
      call handler%setLevel(INFO)
      call handler%handle(LogRecord('name', CRITICAL, 'hello'))

      rewind(this%unit)
      read(this%unit,'(a)') foundMessage
      
      @assertEqual('CRITICAL: hello', foundMessage)

   end subroutine test_handleAboveThreshold
   

   @test
   subroutine test_equal(this)
      class (Test_StreamHandler), intent(inout) :: this


      type (StreamHandler) :: a
      type (StreamHandler) :: b

      a = StreamHandler(unit=this%unit, level=INFO)
      b = StreamHandler(unit=this%unit, level=INFO)

      @assertTrue(a == b)
      @assertFalse(a /= b)

   end subroutine test_equal


   @test
   subroutine test_equalDifferentLevel(this)
      class (Test_StreamHandler), intent(inout) :: this


      type (StreamHandler) :: a
      type (StreamHandler) :: b

      a = StreamHandler(unit=this%unit, level=INFO)
      b = StreamHandler(unit=this%unit, level=DEBUG)

      @assertFalse(a == b)
      @assertTrue(a /= b)

   end subroutine test_equalDifferentLevel


   @test
   subroutine test_equalDifferentUnit(this)
      class (Test_StreamHandler), intent(inout) :: this


      type (StreamHandler) :: a
      type (StreamHandler) :: b

      a = StreamHandler()
      b = StreamHandler(unit=this%unit)

      @assertFalse(a == b)
      @assertTrue(a /= b)

   end subroutine test_equalDifferentUnit


end module Test_StreamHandler_mod
