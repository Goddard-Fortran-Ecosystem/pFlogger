module Test_StreamHandler_mod
   use pFUnit_mod
   use ASTG_SeverityLevels_mod
   use ASTG_StreamHandler_mod
   implicit none

   public :: Test_StreamHandler
   
@TestCase
   type, extends(TestCase) :: Test_StreamHandler
      integer :: unit
   contains
      procedure :: setUp   
      procedure :: tearDown 
   end type Test_StreamHandler

contains

   
   subroutine setUp(this)
      class (Test_StreamHandler), intent(inout) :: this

      open(newunit=this%unit, file='testStreamHandler.txt', form='formatted', &
           status='new')

   end subroutine setUp

   
   subroutine tearDown(this)
      class (Test_StreamHandler), intent(inout) :: this

      close(this%unit, status='delete')

   end subroutine tearDown

   
@Test
   subroutine test_emitBasic(this)
      class (Test_StreamHandler), intent(inout) :: this
      type (StreamHandler) :: handler
      character(len=32) :: foundMessage

      handler = StreamHandler(unit=this%unit)
      call handler%setLevel(INFO)
      call handler%emit(INFO, 'hello')

      rewind(this%unit)
      read(this%unit,'(a)') foundMessage
      
      @assertEqual('INFO: hello', foundMessage)

   end subroutine test_emitBasic

   
@Test
   subroutine test_emitBelowThreshold(this)
      use iso_fortran_env, only: IOSTAT_END
      class (Test_StreamHandler), intent(inout) :: this

      type (StreamHandler) :: handler
      character(len=:), allocatable :: message
      character(len=32) :: foundMessage
      integer :: iostatus
      
      message = 'hello'
      handler = StreamHandler(unit=this%unit)
      call handler%setLevel(INFO)
      call handler%emit(DEBUG, 'hello')

      rewind(this%unit)
      read(this%unit,'(a)', IOSTAT=iostatus) foundMessage
      
      @assertEqual(IOSTAT_END, iostatus)

   end subroutine test_emitBelowThreshold

   
@Test
   subroutine test_emitAboveThreshold(this)
      class (Test_StreamHandler), intent(inout) :: this

      type (StreamHandler) :: handler
      character(len=32) :: foundMessage

      handler = StreamHandler(unit=this%unit)
      call handler%setLevel(INFO)
      call handler%emit(CRITICAL, 'hello')

      rewind(this%unit)
      read(this%unit,'(a)') foundMessage
      
      @assertEqual('CRITICAL: hello', foundMessage)

   end subroutine test_emitAboveThreshold
   
   
end module Test_StreamHandler_mod
