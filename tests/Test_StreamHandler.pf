module Test_StreamHandler_mod
   use pFUnit_mod
   use ASTG_SeverityLevels_mod
   use ASTG_StreamHandler_mod
   use ASTG_LogRecord_mod
   use ASTG_Formatter_mod
   use MockDateFormat_mod
   implicit none

@TestCase
   type, extends(TestCase) :: Test_StreamHandler
      type (Formatter) :: f
      integer :: unit
   contains
      procedure :: setUp   
      procedure :: tearDown 
   end type Test_StreamHandler

contains

   
   subroutine setUp(this)
      class (Test_StreamHandler), intent(inout) :: this

      open(newunit=this%unit, file='testStreamHandler.txt', form='formatted', &
           status='new')
      mockdf%f = Formatter()
      mockdf%Y = 2015
      mockdf%M = 1
      mockdf%D = 2
      mockdf%HH = 3
      mockdf%MM = 4
      mockdf%SS = 5
      mockdf%MS = 123

   end subroutine setUp

   
   subroutine tearDown(this)
      class (Test_StreamHandler), intent(inout) :: this

      close(this%unit, status='delete')

   end subroutine tearDown

   
@Test
   subroutine test_handleBasic(this)
      class (Test_StreamHandler), intent(inout) :: this
      type (StreamHandler) :: handler
      character(len=32) :: foundMessage

      handler = StreamHandler(unit=this%unit)
      call handler%setLevel(INFO)
      call handler%handle(LogRecord(name='SHname', message='hello', level=INFO))

      rewind(this%unit)
      read(this%unit,'(a)') foundMessage
      
      @assertEqual('INFO: SHname: hello', foundMessage)

   end subroutine test_handleBasic

@Test
   subroutine test_emitBasicWithFormat(this)
      use FTL_XWrapVec_mod
      use ASTG_Formatter_mod
      class (Test_StreamHandler), intent(inout) :: this
      type (StreamHandler) :: handler
      character(len=32) :: foundMessage

      type (LogRecord) :: record
      type(Formatter) :: fmt
      type (XWrapVec) :: args
      
      args = XWrapVec()
      call args%push_back_alt(1)

      ! Create a logging format
      fmt = Formatter('%(levelName::a): %(name::a): %(message::a)')

      handler = StreamHandler(unit=this%unit)
      call handler%setFormatter(fmt)
      record = LogRecord('A', INFO, 'Goodbye %i1.1', args=args)
      call handler%handle(record)
      
      rewind(this%unit)
      read(this%unit,'(a)') foundMessage
      @assertEqual('INFO: A: '//record%getMessage(), foundMessage)
      
   end subroutine test_emitBasicWithFormat

   
@Test
   subroutine test_emitBasicWithFormatAndDate(this)
      use FTL_XWrapVec_mod
      use ASTG_Formatter_mod
      use FTL_CIStringXUMap_mod
      use FTL_String_mod
      class (Test_StreamHandler), intent(inout) :: this
      type (StreamHandler) :: handler
      character(len=32) :: foundMessage

      type (LogRecord) :: record
      type(Formatter) :: fmt
      type (XWrapVec) :: args
      type (CIStringXUMap) :: extra
      type (CIStringXUMapIter) :: iter
      type (String) :: wrapName
      
      args = XWrapVec()
      call args%push_back_alt(1)

      ! Create a LogRecord
      extra = CIStringXUMap()
      record%name = 'someRec'
      record%level = INFO
      record%message = 'datefmt'
      record%extra = extra
      ! workaround for ifort
      wrapName = 'someRec'
      iter = record%extra%emplace('name', wrapName)
      iter = record%extra%emplace('level', INFO)
      iter = record%extra%emplace('levelName', String(levelToString(INFO)))

      call mockdf%fillDateAndTime(record)
      mockdf%f = Formatter(&
           fmt='%(asctime::a) %(levelName::a): %(name::a): %(message::a)', &
           datefmt='%(HH::i2.2)-%(MM::i2.2)-%(SS::i2.2)')

      handler = StreamHandler(unit=this%unit)
      call handler%setFormatter(mockdf%f)
      call handler%handle(record)
      
      rewind(this%unit)
      read(this%unit,'(a)') foundMessage
      @assertEqual('03-04-05 INFO: someRec: '//record%getMessage(), foundMessage)
      
   end subroutine test_emitBasicWithFormatAndDate

   
@Test
   subroutine test_handleBelowThreshold(this)
      use iso_fortran_env, only: IOSTAT_END
      class (Test_StreamHandler), intent(inout) :: this

      type (StreamHandler) :: handler
      character(len=32) :: foundMessage
      integer :: iostatus
      
      handler = StreamHandler(unit=this%unit)
      call handler%setLevel(INFO)
      call handler%handle(LogRecord('name', DEBUG, 'hello'))

      rewind(this%unit)
      read(this%unit,'(a)', IOSTAT=iostatus) foundMessage
      
      @assertEqual(IOSTAT_END, iostatus)

   end subroutine test_handleBelowThreshold

   
@Test
   subroutine test_handleAboveThreshold(this)
      class (Test_StreamHandler), intent(inout) :: this

      type (StreamHandler) :: handler
      character(len=32) :: foundMessage

      handler = StreamHandler(unit=this%unit)
      call handler%setLevel(INFO)
      call handler%handle(LogRecord('name', CRITICAL, 'hello'))

      rewind(this%unit)
      read(this%unit,'(a)') foundMessage
      
      @assertEqual('CRITICAL: name: hello', foundMessage)

   end subroutine test_handleAboveThreshold
   

   @test
   subroutine test_equal(this)
      class (Test_StreamHandler), intent(inout) :: this


      type (StreamHandler) :: a
      type (StreamHandler) :: b

      a = StreamHandler(unit=this%unit, level=INFO)
      b = StreamHandler(unit=this%unit, level=INFO)

      @assertTrue(a == b)
      @assertFalse(a /= b)

   end subroutine test_equal


   @test
   subroutine test_equalDifferentLevel(this)
      class (Test_StreamHandler), intent(inout) :: this


      type (StreamHandler) :: a
      type (StreamHandler) :: b

      a = StreamHandler(unit=this%unit, level=INFO)
      b = StreamHandler(unit=this%unit, level=DEBUG)

      @assertFalse(a == b)
      @assertTrue(a /= b)

   end subroutine test_equalDifferentLevel


   @test
   subroutine test_equalDifferentUnit(this)
      class (Test_StreamHandler), intent(inout) :: this


      type (StreamHandler) :: a
      type (StreamHandler) :: b

      a = StreamHandler()
      b = StreamHandler(unit=this%unit)

      @assertFalse(a == b)
      @assertTrue(a /= b)

   end subroutine test_equalDifferentUnit


end module Test_StreamHandler_mod
