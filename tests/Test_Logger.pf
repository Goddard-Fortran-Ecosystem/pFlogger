module Test_Logger_mod
   use ASTG_Logger_mod
   use pfunit_mod
   implicit none

   public :: Test_Logger

@TestCase
   type, extends(TestCase) :: Test_Logger
      type (Logger) :: fileLogger
   contains
      procedure :: setUp     ! overides generic
      procedure :: tearDown  ! overrides generic
   end type Test_Logger

   
contains

   
   subroutine setUp(this)
      class (Test_Logger), intent(inout) :: this
      this%fileLogger = Logger()
   end subroutine setUp

   
   subroutine tearDown(this)
      class (Test_Logger), intent(inout) :: this
      integer :: unit

      open(newunit=unit, file='logfile')
     ! delete file
      close(unit, status='delete')

   end subroutine tearDown

   
!!$ @Test
!!$   subroutine test_logfile(this)
!!$      use ASTG_AbstractHandler_mod
!!$      use FTL_AbstracthandlerPolyWrap_mod
!!$      use FTL_AbstracthandlerPolyWrapVector_mod
!!$      class (Test_Logger), intent(inout) :: this
!!$
!!$      integer :: unit
!!$      character(len=:), allocatable :: message
!!$      character(len=32) :: foundMessage
!!$
!!$      type (AbstractHandlerPolyWrapVectorIterator) :: iter
!!$
!!$      type (AbstractHandlerPolyWrapVector), pointer :: handlers
!!$      type (AbstractHandlerPolyWrap), pointer :: handlerWrap
!!$      class (AbstractHandler), pointer :: handler
!!$
!!$      message = 'hello'
!!$      call this%fileLogger%log(INFO, message)
!!$
!!$      handlers => this%fileLogger%getHandlers()
!!$
!!$      iter = handlers%begin()
!!$      do while (iter /= handlers%end())
!!$         handlerWrap => iter%get()
!!$         handler => handlerWrap%get()
!!$         call handler%close()
!!$         call iter%next()
!!$      end do
!!$
!!$      open(newunit=unit, file='logfile', status='old')
!!$      read(unit, '(a)') foundMessage
!!$      close(unit)
!!$
!!$      @assertEqual(message, foundMessage)
!!$      
!!$   end subroutine test_logfile
!!$   
    
end module Test_Logger_mod

