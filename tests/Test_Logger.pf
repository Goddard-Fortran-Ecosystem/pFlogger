module Test_Logger_mod
   use pfunit_mod
   use MockHandler_mod
   use ASTG_Logger_mod
   use ASTG_SeverityLevels_mod
   use ASTG_LogRecord_mod
   implicit none

   public :: Test_Logger

@TestCase
   type, extends(TestCase) :: Test_Logger
      type (Logger) :: basicLogger
      ! Here we use a mock handler that collects data in a 'mock buffer'
      type (MockBuffer) :: mockBuffer
   contains
      procedure :: setUp    
      procedure :: tearDown 
   end type Test_Logger

contains


   subroutine setUp(this)
      class (Test_Logger), intent(inout) :: this
      type (MockHandler) :: mockHandler_
      
      this%basicLogger = Logger('A')
      mockHandler_ = MockHandler(this%mockBuffer)

      call this%basicLogger%addHandler(mockHandler_)

   end subroutine setUp


   subroutine tearDown(this)
      class (Test_Logger), intent(inout) :: this

      ! Clean up mock handler's buffer 
      if (allocated(this%mockBuffer%buffer)) deallocate(this%mockBuffer%buffer)
      
   end subroutine tearDown
   

@Test
   subroutine test_makeRecord(this)
      use ASTG_UnlimitedVector_mod, only: UnlimitedVector => Vector
      class (Test_Logger), intent(inout) :: this
      type(LogRecord) :: record
      type (UnlimitedVector) :: args
      
      record = this%basicLogger%makeRecord(INFO, 'hi')
      @assertEqual('hi', record%getMessage())
      
      record = this%basicLogger%makeRecord(INFO, 'hi', args=args)
      @assertEqual('hi', record%getMessage())

   end subroutine test_makeRecord
   

@Test
   subroutine test_isEnabledFor(this)
      class (Test_Logger), intent(inout) :: this

      call this%basicLogger%setLevel(DEBUG)
      @assertTrue(this%basicLogger%isEnabledFor(DEBUG))

      call this%basicLogger%setLevel(INFO)
      @assertTrue(this%basicLogger%isEnabledFor(INFO))
      @assertFalse(this%basicLogger%isEnabledFor(DEBUG))

      call this%basicLogger%setLevel(WARNING)
      @assertTrue(this%basicLogger%isEnabledFor(WARNING))
      @assertFalse(this%basicLogger%isEnabledFor(INFO))

      call this%basicLogger%setLevel(ERROR)
      @assertTrue(this%basicLogger%isEnabledFor(ERROR))
      @assertFalse(this%basicLogger%isEnabledFor(WARNING))

      call this%basicLogger%setLevel(CRITICAL)
      @assertTrue(this%basicLogger%isEnabledFor(CRITICAL))
      @assertFalse(this%basicLogger%isEnabledFor(ERROR))

      
   end subroutine test_isEnabledFor

   
@Test
   subroutine test_logBasic(this)
      class (Test_Logger), intent(inout) :: this

      ! Log message with INFO level
      call this%basicLogger%log(INFO, 'test_logBasic')
      @assertEqual('test_logBasic', this%mockBuffer%buffer)

      ! Log message with CRITICAL level
      call this%basicLogger%log(CRITICAL, 'test_logBasic')
      @assertEqual('test_logBasic', this%mockBuffer%buffer)

   end subroutine test_logBasic


@Test
   subroutine test_logBelowThreshold(this)
      class (Test_Logger), intent(inout) :: this

      ! Log a message at DEBUG level
      call this%basicLogger%log(DEBUG, 'test_logBelowThreshold')
      ! Message WILL NOT be logged because DEBUG<INFO
      ! Thus buffer will be empty (unallocated)
      @assertFalse(allocated(this%mockBuffer%buffer))

   end subroutine test_logBelowThreshold

   
@Test
   subroutine test_logAboveThreshold(this)
      class (Test_Logger), intent(inout) :: this

      ! Log a message at CRITICAL level
      call this%basicLogger%log(CRITICAL, 'test_logAboveThreshold')
      ! Message WILL be logged because CRITICAL>INFO
      @assertEqual('test_logAboveThreshold', this%mockBuffer%buffer)

   end subroutine test_logAboveThreshold

   
@Test
   subroutine test_debug(this)
      class (Test_Logger), intent(inout) :: this

      call this%basicLogger%setLevel(DEBUG)
      call this%basicLogger%debug('test_debug')
      @assertEqual('test_debug', this%mockBuffer%buffer)

   end subroutine test_debug
   
@Test
   subroutine test_debugNoEmit(this)
      class (Test_Logger), intent(inout) :: this

      call this%basicLogger%setLevel(INFO)
      ! Here debug() will not emit message because DEBUG<INFO
      call this%basicLogger%debug('test_debug')
      @assertFalse(allocated(this%mockBuffer%buffer))

   end subroutine test_debugNoEmit
   
@Test
   subroutine test_info(this)
      class (Test_Logger), intent(inout) :: this

      call this%basicLogger%info('test_info')
      @assertEqual('test_info', this%mockBuffer%buffer)

   end subroutine test_info


@Test
   subroutine test_infoNoEmit(this)
      class (Test_Logger), intent(inout) :: this

      call this%basicLogger%setLevel(WARNING)
      call this%basicLogger%info('test_info')
      @assertFalse(allocated(this%mockBuffer%buffer))

   end subroutine test_infoNoEmit



@Test
   subroutine test_warning(this)
      class (Test_Logger), intent(inout) :: this

      call this%basicLogger%setLevel(WARNING)
      call this%basicLogger%warning('test_warning')
      @assertEqual('test_warning', this%mockBuffer%buffer)

   end subroutine test_warning
   

@Test
   subroutine test_warningNoEmit(this)
      class (Test_Logger), intent(inout) :: this

      call this%basicLogger%setLevel(ERROR)
      call this%basicLogger%warning('test_warning')
      @assertFalse(allocated(this%mockBuffer%buffer))

   end subroutine test_warningNoEmit


@Test
   subroutine test_error(this)
      class (Test_Logger), intent(inout) :: this

      call this%basicLogger%setLevel(ERROR)
      call this%basicLogger%error('test_error')
      @assertEqual('test_error', this%mockBuffer%buffer)

   end subroutine test_error
    

@Test
   subroutine test_errorNoEmit(this)
      class (Test_Logger), intent(inout) :: this

      call this%basicLogger%setLevel(CRITICAL)
      call this%basicLogger%error('test_error')
      @assertFalse(allocated(this%mockBuffer%buffer))

   end subroutine test_errorNoEmit


@Test
   subroutine test_critical(this)
      class (Test_Logger), intent(inout) :: this

      call this%basicLogger%setLevel(CRITICAL)
      call this%basicLogger%critical('test_critical')
      @assertEqual('test_critical', this%mockBuffer%buffer)

   end subroutine test_critical


@test
   subroutine test_removeHandler_missing(this)
      class (Test_Logger), intent(inout) :: this

      type (Logger) :: lgr
      type (MockHandler) :: mockHandler_
      type (MockBuffer) :: buffer

      lgr = Logger('A')
      mockHandler_ = MockHandler(buffer, level=DEBUG)

      call lgr%removeHandler(mockHandler_)
      @assertExceptionRaised('Logger%removeHandler() called - logger has no such handler.')

   end subroutine test_removeHandler_missing


@test
   subroutine test_removeHandler_present(this)
      class (Test_Logger), intent(inout) :: this

      type (Logger) :: lgr
      type (MockHandler) :: mockHandler_
      type (MockBuffer) :: buffer

      lgr = Logger('A')
      mockHandler_ = MockHandler(buffer, level=DEBUG)
      call lgr%addHandler(mockHandler_)
      call lgr%removeHandler(mockHandler_)
      
      ! no exception should have been thrown
   end subroutine test_removeHandler_present


@test
   subroutine test_removeHandler_remove1st(this)
      use ASTG_AbstractHandlerPolyVector_mod
      class (Test_Logger), intent(inout) :: this

      type (Logger) :: lgr
      type (MockHandler) :: mockHandler_
      type (MockBuffer) :: bufferA
      type (MockBuffer) :: bufferB

      lgr = Logger('A')
      mockHandler_ = MockHandler(bufferA, level=DEBUG)
      call lgr%addHandler(mockHandler_)
      mockHandler_ = MockHandler(bufferB, level=INFO)
      call lgr%addHandler(mockHandler_)
      mockHandler_ = MockHandler(bufferA, level=DEBUG)
      print*,'begin'
      call lgr%removeHandler(mockHandler_)

      call lgr%info('Hello')
      @assertEqual('Hello', bufferB%buffer)
      @assertTrue(.not. allocated(bufferA%buffer))

   end subroutine test_removeHandler_remove1st


@test
   subroutine test_addHandler_noDups(this)
      use ASTG_AbstractHandlerPolyVector_mod, only: HandlerVector => Vector
      class (Test_Logger), intent(inout) :: this

      type (Logger), target :: lgr
      type (MockBuffer), target :: bufA
      type (MockBuffer), target :: bufB
      type (HandlerVector), pointer :: handlers

      lgr = Logger('A')

      call lgr%addHandler(MockHandler(bufA))
      call lgr%addHandler(MockHandler(bufB))

      ! Duplicate - do not add.
      call lgr%addHandler(MockHandler(bufA))

      handlers => lgr%getHandlers()
      @assertEqual(2, handlers%size())

   end subroutine test_addHandler_noDups


end module Test_Logger_mod

