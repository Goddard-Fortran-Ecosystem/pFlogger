module Test_Logger_mod
   use ASTG_Logger_mod
   use MockHandler_mod
   use ASTG_SeverityLevels_mod
   use pfunit_mod
   implicit none

   public :: Test_Logger

@TestCase
   type, extends(TestCase) :: Test_Logger
      type (Logger) :: basicLogger
      type (Logger) :: levelLogger
      type (MockBuffer) :: basicBuffer
      type (MockBuffer) :: levelBuffer
   contains
      procedure :: setUp    
      procedure :: tearDown 
   end type Test_Logger

   
contains


   subroutine setUp(this)
      class (Test_Logger), intent(inout) :: this
      type (MockHandler) :: handler
      
      this%basicLogger = Logger('A')
      handler = MockHandler(this%basicBuffer)
      call handler%setLevel(INFO)
      call this%basicLogger%addHandler(handler)

      ! Create a 'level' logger (uses methods named after level names)
      this%levelLogger = Logger('A')
      
   end subroutine setUp


   subroutine tearDown(this)
      class (Test_Logger), intent(inout) :: this

      ! Clean up mock handler's buffer 
      if (allocated(this%basicBuffer%buffer)) deallocate(this%basicBuffer%buffer)
      if (allocated(this%levelBuffer%buffer)) deallocate(this%levelBuffer%buffer)
      
   end subroutine tearDown
   

@Test
   subroutine test_logBasic(this)
      class (Test_Logger), intent(inout) :: this

      call this%basicLogger%log(INFO, 'test_logBasic')
      ! buffer is in MockHandler_mod
      @assertEqual('INFO: test_logBasic', this%basicBuffer%buffer)

   end subroutine test_logBasic

   
@Test
   subroutine test_logBelowThreshold(this)
      class (Test_Logger), intent(inout) :: this

      ! Log a message at DEBUG level
      call this%basicLogger%log(DEBUG, 'test_logBelowThreshold')
      ! Message WILL NOT be logged because DEBUG<INFO
      ! Thus buffer will be empty (unallocated)
      @assertFalse(allocated(this%basicBuffer%buffer))

   end subroutine test_logBelowThreshold

   
@Test
   subroutine test_logAboveThreshold(this)
      class (Test_Logger), intent(inout) :: this

      ! Log a message at CRITICAL level
      call this%basicLogger%log(CRITICAL, 'test_logAboveThreshold')
      ! Message WILL be logged because CRITICAL>INFO
      @assertEqual('CRITICAL: test_logAboveThreshold', this%basicBuffer%buffer)

   end subroutine test_logAboveThreshold

   
@Test
   subroutine test_debug(this)
      class (Test_Logger), intent(inout) :: this
      type (MockHandler) :: handler

      ! Set handler's severity level and add handler to levelLogger
      handler = MockHandler(this%levelBuffer)
      call handler%setLevel(DEBUG)
      call this%levelLogger%addHandler(handler)

      call this%levelLogger%debug('test_debug')
      @assertEqual('DEBUG: test_debug', this%levelBuffer%buffer)

   end subroutine test_debug
   
@Test
   subroutine test_debugNoEmit(this)
      class (Test_Logger), intent(inout) :: this
      type (MockHandler) :: handler

      ! Set handler's severity level and add handler to levelLogger
      handler = MockHandler(this%levelBuffer)
      call handler%setLevel(INFO)
      call this%levelLogger%addHandler(handler)
      ! Here debug() will not emit message because DEBUG<INFO
      call this%levelLogger%debug('test_debug')
      @assertFalse(allocated(this%levelBuffer%buffer))

   end subroutine test_debugNoEmit
   
@Test
   subroutine test_info(this)
      class (Test_Logger), intent(inout) :: this
      type (MockHandler) :: handler

      ! Set handler's severity level and add handler to levelLogger
      handler = MockHandler(this%levelBuffer)
      call handler%setLevel(INFO)
      call this%levelLogger%addHandler(handler)
      call this%levelLogger%info('test_info')
      @assertEqual('INFO: test_info', this%levelBuffer%buffer)

   end subroutine test_info

@Test
   subroutine test_warning(this)
      class (Test_Logger), intent(inout) :: this
      type (MockHandler) :: handler

      ! Set handler's severity level and add handler to levelLogger
      handler = MockHandler(this%levelBuffer)
      call handler%setLevel(WARNING)
      call this%levelLogger%addHandler(handler)

      call this%levelLogger%warning('test_warning')
      @assertEqual('WARNING: test_warning', this%levelBuffer%buffer)

   end subroutine test_warning
   
@Test
   subroutine test_error(this)
      class (Test_Logger), intent(inout) :: this
      type (MockHandler) :: handler

      ! Set handler's severity level and add handler to levelLogger
      handler = MockHandler(this%levelBuffer)
      call handler%setLevel(ERROR)
      call this%levelLogger%addHandler(handler)

      call this%levelLogger%error('test_error')
      @assertEqual('ERROR: test_error', this%levelBuffer%buffer)

   end subroutine test_error
    
@Test
   subroutine test_critical(this)
      class (Test_Logger), intent(inout) :: this
      type (MockHandler) :: handler

      ! Set handler's severity level and add handler to levelLogger
      handler = MockHandler(this%levelBuffer)
      call handler%setLevel(CRITICAL)
      call this%levelLogger%addHandler(handler)

      call this%levelLogger%critical('test_critical')
      @assertEqual('CRITICAL: test_critical', this%levelBuffer%buffer)

   end subroutine test_critical

@Test
   subroutine test_notset(this)
      class (Test_Logger), intent(inout) :: this
      type (MockHandler) :: handler

      ! Set handler's severity level and add handler to levelLogger
      handler = MockHandler(this%levelBuffer)
      call handler%setLevel(NOTSET)
      call this%levelLogger%addHandler(handler)

      call this%levelLogger%notset('test_notset')
      @assertEqual('NOTSET: test_notset', this%levelBuffer%buffer)

   end subroutine test_notset
   

end module Test_Logger_mod

