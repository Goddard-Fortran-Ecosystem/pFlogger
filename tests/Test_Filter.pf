module Test_Filter_mod
   use pFUnit_mod
   use ASTG_Filter_mod
   use ASTG_LogRecord_mod
   use FTL_Object_mod
   use FTL_CaseInsensitiveString_mod
   use ASTG_SeverityLevels_mod, only: INFO

contains

   @test
   subroutine test_defaultFilterNameMismatch()
      use FTL_Object_mod
      type (Filter) :: f
      type (LogRecord) :: record

      f = Filter('A')
      record = LogRecord('B', INFO, 'some message')

      @assertFalse(f%doFilter(record))
      
   end subroutine test_defaultFilterNameMismatch


   @test
   subroutine test_defaultFilterNameMatch()
      type (Filter) :: f
      type (LogRecord) :: record

      call initFilter(f, 'A')
      call initLogRecord(record, 'A', INFO, 'some message')

      @assertTrue(f%doFilter(record))
      
   end subroutine test_defaultFilterNameMatch


   @test
   subroutine test_defaultFilterPartialMatch()
      type (Filter) :: f
      type (LogRecord) :: record

      call initFilter(f, 'A')
      call initLogRecord(record, 'AB', INFO, 'some message')
      @assertTrue(f%doFilter(record))

      call initFilter(f, 'AB')
      record = LogRecord('A', INFO, 'some message')
      @assertFalse(f%doFilter(record))
      

   end subroutine test_defaultFilterPartialMatch

   @test
   subroutine test_equal_same()
      type (Filter) :: f

      call initFilter(f, 'A')
      @assertEqualUserDefined(f,f)
      @assertFalse(f /= f)

   end subroutine test_equal_same


   @test
   subroutine test_equal_different()
      type (Filter) :: fa, fb

      call initFilter(fa, 'A')
      call initFilter(fb, 'B')

      @assertFalse(fa == fb)
      @assertTrue(fa /= fb)

   end subroutine test_equal_different


   @test
   subroutine test_filterCaseInsensitive()
      type (Filter) :: f
      type (LogRecord) :: record

      call initFilter(f, 'A')
      record = LogRecord('a', INFO, 'some message')

      @assertTrue(f%doFilter(record))

   end subroutine test_filterCaseInsensitive


end module Test_Filter_mod
