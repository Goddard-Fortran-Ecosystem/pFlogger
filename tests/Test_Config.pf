!
! Note that at the time this module was created, gfortran 5.1 did not correctly
! retain lengths of strings when treated as unlimited polymorphic entities.
! Hence, character in such maps must be quoted inside a String object.
!
module Test_Config_mod
   use pfunit_mod
   use FTL
   use ASTG_Logger_mod
   use ASTG_LoggerManager_mod
   use ASTG_SeverityLevels_mod

   use ASTG_Config_mod

   implicit none

#define P(k,v) p(k,String(v))
   
contains

   @test
   subroutine test_check_schema_specified()
      type (Config) :: dict

      call dictConfig(dict)
      @assertExceptionRaised("Config::dictConfig() - 'schema_version' not found.")

   end subroutine test_check_schema_specified

   @test
   subroutine test_check_schema_version()
      type (Config) :: dict

      call dict%insert('schema_version', 2)
      call dictConfig(dict)
      @assertExceptionRaised('Config::dictConfig() - unsupported schema version. Must be 1.')

   end subroutine test_check_schema_version

   @test
   subroutine test_build_formatter_noargs()
      use ASTG_Formatter_mod
      use ASTG_LogRecord_mod
      type (Config) :: cfg
      type (Formatter) :: fmtr
      type (LogRecord) :: record
      character(len=:), allocatable :: logMessage

      fmtr = build_formatter(cfg)

      call initLogRecord(record, 'A', DEBUG, 'hello')
      logMessage = fmtr%format(record)
      @assertEqual('hello', logMessage)

   end subroutine test_build_formatter_noargs

   @test
   subroutine test_build_formatter_withFmt()
      use ASTG_Formatter_mod
      use ASTG_LogRecord_mod
      type (Config) :: cfg
      type (Formatter) :: fmtr
      type (LogRecord) :: record
      character(len=:), allocatable :: logMessage

      cfg = Config([P('fmt','---')])
      fmtr = build_formatter(cfg)

      call initLogRecord(record, 'A', DEBUG, 'hello')
      logMessage = fmtr%format(record)
      @assertEqual('---', logMessage)

   end subroutine test_build_formatter_withFmt

   @test
   subroutine test_build_formatter_withDateFmt()
      use ASTG_Formatter_mod
      use ASTG_LogRecord_mod
      type (Config) :: cfg
      type (Formatter) :: fmtr
      type (LogRecord) :: record
      character(len=:), allocatable :: logMessage

      cfg = Config([P('fmt','%(asctime)a %(message)a'), P('datefmt','date')])
      fmtr = build_formatter(cfg)

      call initLogRecord(record, 'A', DEBUG, 'hello')
      logMessage = fmtr%format(record)
      @assertEqual('date hello', logMessage)

   end subroutine test_build_formatter_withDateFmt

   @test
   subroutine test_build_formatters()
      use ASTG_StringFormatterMap_mod
      type (Config) :: formattersDict
      type (FormatterMap) :: formatters

      formattersDict = &
           & Config([ &
           &       p('A', Config([P('fmt','---')]) ), &
           &       p('B', Config([P('fmt','---'), P('datefmt', 'hello')])) &
           &     ])

      formatters = build_formatters(formattersDict)
      @assertEqual(2, formatters%size())

   end subroutine test_build_formatters

   @test
   subroutine test_build_filter()
      use ASTG_Filter_mod
      type (Config) :: cfg
      type (Filter) :: f
      character(len=:), allocatable :: logMessage

      cfg = Config([P('name', 'A')])
      f = build_filter(cfg)

      @assertEqual('A', f%getName())

   end subroutine test_build_filter

   @test
   subroutine test_build_filters()
      use ASTG_StringFilterMap_mod
      type (Config) :: filtersDict
      type (FilterMap) :: filters

      filtersDict = &
           & Config([ &
           &       p('A', Config([P('name', 'A')])), &
           &       p('B', Config([P('name', 'B')])) &
           &     ])

      filters = build_filters(filtersDict)
      @assertEqual(2, filters%size())

   end subroutine test_build_filters


   @test
   subroutine test_build_streamhandler()
      use ASTG_StringFormatterMap_mod
      use ASTG_StringFilterMap_mod
      use ASTG_StreamHandler_mod
      use ASTG_Filter_mod
      use ASTG_Formatter_mod
      type (Config) :: handler_cfg
      type (FilterMap) :: filters
      type (FormatterMap) :: formatters
      type (StreamHandler) :: h


      call filters%insert('filterA',Filter('A'))
      call filters%insert('filterB',Filter('B'))

      call formatters%insert('formatterA', Formatter('%(message)'))
      call formatters%insert('formatterB,', Formatter('%(levelname)'))

      handler_cfg = Config([ &
           & P('class', 'StreamHandler'), &
           & P('unit', 'OUTPUT_UNIT'), &
           & P('formatter', 'handlerB'), &
           & P('filters', '[filterA]'), &
           & P('level', 'DEBUG') &
           & ])

      ! TODO
      ! With F2008, this can become an assignment statement
      h = build_streamhandler(handler_cfg, formatters, filters)

   end subroutine test_build_streamhandler

   @test
   subroutine test_build_handler()
      use ASTG_StringFormatterMap_mod
      use ASTG_StringFilterMap_mod
      use ASTG_StreamHandler_mod
      use ASTG_Filter_mod
      use ASTG_Formatter_mod
      use ASTG_AbstractHandler_mod
      type (Config) :: handler_cfg
      class (AbstractHandler), allocatable :: h

      type (FilterMap) :: filters
      type (FormatterMap) :: formatters

      call filters%insert('filterA',Filter('A'))
      call filters%insert('filterB',Filter('B'))

      call formatters%insert('formatterA', Formatter('%(message)'))
      call formatters%insert('formatterB,', Formatter('%(levelname)'))

      handler_cfg = Config([ &
           & P('class', 'StreamHandler'), &
           & P('unit', 'OUTPUT_UNIT'), &
           & P('formatter', 'formatterB'), &
           & P('filters', '[filterA]'), &
           & P('level', 'DEBUG') &
           & ])

      allocate(h, source=build_handler(handler_cfg, formatters, filters))
      @assertEqual(DEBUG, h%getLevel())

   end subroutine test_build_handler

   @test
   subroutine test_build_handlers()
      use ASTG_StringHandlerMap_mod
      use ASTG_StringFormatterMap_mod
      use ASTG_StringFilterMap_mod
      use ASTG_Filter_mod
      use ASTG_StreamHandler_mod
      use ASTG_Formatter_mod
      type (Config) :: handlersDict
      type (HandlerMap) :: handlers

      type (Config) :: h1_cfg, h2_cfg

      type (FilterMap) :: filters
      type (FormatterMap) :: formatters

      call filters%insert('filterA',Filter('A'))
      call filters%insert('filterB',Filter('B'))

      call formatters%insert('formatterA', Formatter('%(message)'))
      call formatters%insert('formatterB,', Formatter('%(levelname)'))


      h1_cfg = Config([ &
           & P('class', 'StreamHandler'), &
           & P('unit', 'OUTPUT_UNIT'), &
           & P('formatter', 'formatterA'), &
           & P('filters', '[filterA]'), &
           & P('level', 'INFO') &
           & ])

      h2_cfg = Config([ &
           & P('class', 'StreamHandler'), &
           & P('unit', 'OUTPUT_UNIT'), &
           & P('formatter', 'formatterB'), &
           & P('filters', '[filterA,filterB]'), &
           & P('level', 'CRITICAL') &
           & ])

      handlersDict = &
           & Config([ &
           &       p('A', h1_cfg), &
           &       p('B', h2_cfg) &
           &     ])

      handlers = build_handlers(handlersDict, formatters, filters)
      @assertEqual(2, handlers%size())

   end subroutine test_build_handlers


   subroutine test_build_logger_trivial()
      use ASTG_StringFilterMap_mod
      use ASTG_StringHandlerMap_mod

      type (Config) :: cfg
      type (FilterMap) :: filters
      type (HandlerMap) :: handlers

      ! cfg is empty by default
      call build_logger('A', cfg, filters, handlers)

   end subroutine test_build_logger_trivial

   subroutine test_build_logger()
      use ASTG_StringFilterMap_mod
      use ASTG_StringHandlerMap_mod

      use ASTG_Filter_mod
      use ASTG_AbstractHandler_mod
      use ASTG_FileHandler_mod

      type (Config) :: cfg
      type (FilterMap) :: filters
      type (HandlerMap) :: handlers

      call handlers%insert('handlerA', FileHandler('A', delay=.true.))
      call handlers%insert('handlerB', FileHandler('B', delay=.true.))

      call filters%insert('filterA', Filter('A'))
      call filters%insert('filterB', Filter('B'))

      call build_logger('A', cfg, filters, handlers)

   end subroutine test_build_logger


   @test
   subroutine test_basic_loggers_invalid_cfg()
      type (Config) :: cfg
      type (Config) :: loggers

      class (Logger), pointer :: lgr
      character(len=:), allocatable :: expectedMessage

      cfg = Config([ &
           &      p('schema_version', 1), &
           &      p('loggers', 1) &
           &     ])

      call dictConfig(cfg)

      lgr => logging%getLogger('A')
      expectedMessage = "Config::dictConfig() - cannot cast 'loggers' as Map."
      @assertExceptionRaised(expectedMessage)

   end subroutine test_basic_loggers_invalid_cfg

   @test
   subroutine test_basic_loggers()
      type (Config) :: cfg
      type (Config) :: loggers

      class (Logger), pointer :: lgr

      cfg = Config([ &
           &      p('schema_version', 1), &
           &      p('loggers', Config([p('A', Config([P('level','DEBUG')]))])) &
           &     ])

      call dictConfig(cfg)
      lgr => logging%getLogger('A')

      @assertEqual(DEBUG, lgr%getLevel())

   end subroutine test_basic_loggers


end module Test_Config_mod
