module Test_Config_mod
   use ASTG_Config_mod
   use pfunit_mod
   use ASTG_CIStringUnlimitedMap_mod
   use ASTG_Logger_mod

   use ASTG_LoggerManager_mod
   use ASTG_SeverityLevels_mod
   implicit none
   

contains

   @test
   subroutine test_check_schema_specified()
      type (map) :: dict

      call dictConfig(dict)
      @assertExceptionRaised('Config::dictConfig() - No version specified for schema.')

   end subroutine test_check_schema_specified

   @test
   subroutine test_check_schema_version()
      type (map) :: dict

      call dict%insert('schema_version', 2)
      call dictConfig(dict)
      @assertExceptionRaised('Config::dictConfig() - unsupported schema version. Must be 1.')

   end subroutine test_check_schema_version


   @test
   subroutine test_basic_loggers_invalid_dict()
      type (map) :: dict
      type (map) :: loggers

#define P(x,y) mapPair(x,y)

      class (Logger), pointer :: lgr
      character(len=:), allocatable :: expectedMessage
      dict = map([ &
           &      P('schema_version', 1), &
           &      P('loggers', 1) &
           &     ])

      call dictConfig(dict)
      lgr => logging%getLogger('A')

      expectedMessage = "Config::dictConfig() - invalid value for 'loggers'. "// &
           & "Should be class Map."
      @assertExceptionRaised(expectedMessage)

   end subroutine test_basic_loggers_invalid_dict

   @test
   subroutine test_basic_loggers()
      type (map) :: dict
      type (map) :: loggers

#define P(x,y) mapPair(x,y)

      class (Logger), pointer :: lgr

      dict = map([ &
           &      P('schema_version', 1), &
           &      P('loggers', map([P('A', map([P('level','DEBUG')]))])) &
           &     ])

      call dictConfig(dict)
      lgr => logging%getLogger('A')

      @assertEqual(DEBUG, lgr%getLevel())

   end subroutine test_basic_loggers


end module Test_Config_mod
