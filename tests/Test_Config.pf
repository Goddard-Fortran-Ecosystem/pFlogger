!
! Note that at the time this module was created, gfortran 5.1 did not correctly
! retain lengths of strings when treated as unlimited polymorphic entities.
! Hence, character in such maps must be quoted inside a String object.
!
module Test_Config_mod
   use ASTG_Config_mod
   use pfunit_mod
   use ASTG_Logger_mod
   use ASTG_LoggerManager_mod
   use ASTG_SeverityLevels_mod

   use ASTG_CIStringUnlimitedMap_mod
   use ASTG_CIStringFormatterMap_mod, only: FormatterMap => map
   implicit none

#define P(x,y) pair(x,y)

contains

   @test
   subroutine test_check_schema_specified()
      type (map) :: dict

      call dictConfig(dict)
      @assertExceptionRaised("Config::dictConfig() - 'schema_version' not found.")

   end subroutine test_check_schema_specified

   @test
   subroutine test_check_schema_version()
      type (map) :: dict

      call dict%insert('schema_version', 2)
      call dictConfig(dict)
      @assertExceptionRaised('Config::dictConfig() - unsupported schema version. Must be 1.')

   end subroutine test_check_schema_version

   @test
   subroutine test_build_formatter_noargs()
      use ASTG_Formatter_mod
      use ASTG_LogRecord_mod
      type (map) :: cfg
      type (Formatter) :: fmtr
      type (LogRecord) :: record
      character(len=:), allocatable :: logMessage

      cfg = map()
      fmtr = build_formatter(cfg)

      call initLogRecord(record, 'A', DEBUG, 'hello')
      logMessage = fmtr%format(record)
      @assertEqual('hello', logMessage)

   end subroutine test_build_formatter_noargs

   @test
   subroutine test_build_formatter_withFmt()
      use ASTG_Formatter_mod
      use ASTG_LogRecord_mod
      type (map) :: cfg
      type (Formatter) :: fmtr
      type (LogRecord) :: record
      character(len=:), allocatable :: logMessage

      cfg = map([P('fmt','---')])
      fmtr = build_formatter(cfg)

      call initLogRecord(record, 'A', DEBUG, 'hello')
      logMessage = fmtr%format(record)
      @assertEqual('---', logMessage)

   end subroutine test_build_formatter_withFmt

   @test
   subroutine test_build_formatter_withDateFmt()
      use ASTG_Formatter_mod
      use ASTG_LogRecord_mod
      use ASTG_String_mod
      type (map) :: cfg
      type (Formatter) :: fmtr
      type (LogRecord) :: record
      character(len=:), allocatable :: logMessage

      cfg = map([P('fmt',String('%(asctime)a %(message)a')), P('datefmt',String('date'))])
      fmtr = build_formatter(cfg)

      call initLogRecord(record, 'A', DEBUG, 'hello')
      logMessage = fmtr%format(record)
      @assertEqual('date hello', logMessage)

   end subroutine test_build_formatter_withDateFmt

   @test
   subroutine test_build_formatters()
      type (map) :: formattersDict
      type (FormatterMap) :: formatters

      formattersDict = &
           & map([ &
           &       P('A', map([P('fmt','---')]) ), &
           &       P('B', map([P('fmt','---'), P('datefmt','hello')])) &
           &     ])

      formatters = build_formatters(formattersDict)
      @assertEqual(2, formatters%size())

   end subroutine test_build_formatters

   @test
   subroutine test_basic_loggers_invalid_dict()
      type (map) :: dict
      type (map) :: loggers

      class (Logger), pointer :: lgr
      character(len=:), allocatable :: expectedMessage

      dict = map([ &
           &      P('schema_version', 1), &
           &      P('loggers', 1) &
           &     ])

      call dictConfig(dict)

      lgr => logging%getLogger('A')
      expectedMessage = "Config::dictConfig() - cannot cast 'loggers' as Map."
      @assertExceptionRaised(expectedMessage)

   end subroutine test_basic_loggers_invalid_dict

   @test
   subroutine test_basic_loggers()
      type (map) :: dict
      type (map) :: loggers

      class (Logger), pointer :: lgr

      dict = map([ &
           &      P('schema_version', 1), &
           &      P('loggers', map([P('A', map([P('level','DEBUG')]))])) &
           &     ])

      call dictConfig(dict)
      lgr => logging%getLogger('A')

      @assertEqual(DEBUG, lgr%getLevel())

   end subroutine test_basic_loggers


end module Test_Config_mod
