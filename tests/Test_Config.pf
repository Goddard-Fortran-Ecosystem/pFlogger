!
! Note that at the time this module was created, gfortran 5.1 did not correctly
! retain lengths of strings when treated as unlimited polymorphic entities.
! Hence, character in such maps must be quoted inside a String object.
!
module Test_Config
   use funit
   use PFL_Logger
   use PFL_LoggerManager
   use PFL_SeverityLevels
   use PFL_StringFilterMap
   use PFL_StringFormatterMap
   use PFL_StringHandlerMap

   use PFL_Config
   use yafyaml
   implicit none

contains


   @test
   subroutine test_check_schema_specified()
      type (Configuration) :: cfg

      cfg = Configuration(1) ! an almost empty config
      call check_schema_version(cfg)
      @assertExceptionRaised("PFL::Config::check_schema_version() - must specify a schema_version for Config.")

   end subroutine test_check_schema_specified


   @test
   subroutine test_check_schema_version_unsupported()
      type (Configuration) :: cfg

      class(*), pointer :: node

      cfg = Configuration(OrderedStringUnlimitedMap())
      call cfg%get_node_at_selector(node)

      select type (m => node)
      type is (OrderedStringUnlimitedMap)
         call m%insert('schema_version', 2)
         call check_schema_version(cfg) ! Empty config
         @assertExceptionRaised('PFL::Config::check_schema_version() - unsupported schema_version. Allowed values are [1].')
      end select

   end subroutine test_check_schema_version_unsupported


   @test
   subroutine test_check_schema_version_valid()
      type (Configuration) :: cfg

      class(*), pointer :: node

      cfg = Configuration(OrderedStringUnlimitedMap())
      call cfg%get_node_at_selector(node)
      select type (m => node)
      type is (OrderedStringUnlimitedMap)
         call m%insert('schema_version', 1) ! currently only valid option
      end select

      call check_schema_version(cfg) ! Empty config

      ! simply should not throw an exception ...

   end subroutine test_check_schema_version_valid


   @test
   subroutine test_build_formatter_noargs()
      use PFL_Formatter
      use PFL_LogRecord
      type (Configuration) :: cfg
      class (Formatter), allocatable :: fmtr
      type (LogRecord) :: record
      character(len=:), allocatable :: logMessage

      cfg = Configuration(1) 
      call build_formatter(fmtr, cfg)

      call initLogRecord(record, 'A', DEBUG, 'hello')
      logMessage = fmtr%format(record)
      @assertEqual('hello', logMessage)

   end subroutine test_build_formatter_noargs

   
   @test
   subroutine test_build_formatter_withFmt()
      use PFL_Formatter
      use PFL_LogRecord
      type (Configuration) :: cfg
      class (Formatter), allocatable :: fmtr
      type (LogRecord) :: record
      character(len=:), allocatable :: logMessage
      type(Parser) :: p

      p = Parser()
      cfg = p%load(EscapedTextStream("format: --- \n"))
      call build_formatter(fmtr, cfg)

      call initLogRecord(record, 'A', DEBUG, 'hello')
      logMessage = fmtr%format(record)
      @assertEqual('---', logMessage)

   end subroutine test_build_formatter_withFmt

   @test
   subroutine test_build_formatter_withDateFmt()
      use PFL_Formatter
      use PFL_LogRecord
      type (Configuration) :: cfg
      class (Formatter), allocatable :: fmtr
      type (LogRecord) :: record
      character(len=:), allocatable :: logMessage

      type(Parser) :: p

      p = Parser()
      cfg = p%load(EscapedTextStream( &
           & ' format: "%(asctime)a %(message)a"\n' // &
           & " datefmt: date \n"))

      call build_formatter(fmtr, cfg)

      call initLogRecord(record, 'A', DEBUG, 'hello')
      logMessage = fmtr%format(record)
      @assertEqual('date hello', logMessage)

   end subroutine test_build_formatter_withDateFmt

   @test
   subroutine test_build_formatters()
      type (Configuration) :: formattersCfg
      type (FormatterMap), pointer :: formatters
      type (ConfigElements), target :: elements

      type(Parser) :: p

      p = Parser()
      formattersCfg = p%load(EscapedTextStream( &
           & " A: {format: '---'}\n" // &
           & " B: {format: '---', datefmt: hello }\n"))

      
      call elements%build_formatters(formattersCfg)
      formatters => elements%get_formatters()
      @assert_that(int(formatters%size()), is(equal_to(2)))

   end subroutine test_build_formatters

   @test
   subroutine test_build_filter()
      use PFL_AbstractFilter
      use PFL_Filter
      type (Configuration) :: cfg
      class (AbstractFilter), allocatable :: f
      type(Parser) :: p

      p = Parser()
      cfg = p%load(EscapedTextStream( &
           & "  name: A \n"))

      allocate(f, source=build_filter(cfg))

      select type (f)
      type is (Filter)
         @assertEqual('A', f%get_name())
      class default
         @assertFalse(.true.)
      end select

   end subroutine test_build_filter

   @test
   subroutine test_build_filters()
      type (Configuration) :: filtersCfg
      type (FilterMap), pointer :: filters
      type (ConfigElements), target :: elements

      type(Parser) :: p

      p = Parser()
      filtersCfg = p%load(EscapedTextStream( &
           & "  A: {name: A} \n" // &
           & "  B: {name: B} \n"))

      call elements%build_filters(filtersCfg)
      filters => elements%get_filters()
      @assertEqual(2, filters%size())

   end subroutine test_build_filters


   @test
   subroutine test_build_streamhandler()
      use PFL_StreamHandler
      use PFL_LogRecord
      type (Configuration) :: handler_cfg
      type (StreamHandler) :: h
      integer :: unit
      character(len=16) :: unitStr
      type (LogRecord) :: record

      type(Parser) :: p

      open(newunit=unit, file='test_build_streamhandler.txt', status='unknown', &
           & form='formatted')

      write(unitStr,'(i0)') unit

      p = Parser()
      handler_cfg = p%load(EscapedTextStream( &
           & "  class: StreamHandler \n" // &
           & "  unit: " // trim(unitStr) // "\n" // &
           & "  level: INFO"))

      ! Note that, level, filters, and format are added at a higher level.
      h = build_streamhandler(handler_cfg)
      call initLogRecord(record, 'A', DEBUG, 'hello')
      call h%handle(record)

      rewind(unit)
      block
        character(len=80) :: str
        read(unit,'(a)') str
        @assertEqual('DEBUG: A: hello', str)
      end block
      close(unit, status='delete')

   end subroutine test_build_streamhandler

   @test
   subroutine test_build_handler()
      use PFL_StreamHandler
      use PFL_Filter
      use PFL_Formatter
      use PFL_AbstractHandler
      use PFL_LogRecord
      type (Configuration) :: handler_cfg
      class (AbstractHandler), allocatable :: h

      integer :: unit
      character(len=16) :: unitStr

      type (FilterMap), pointer :: filters
      type (FormatterMap), pointer :: formatters
      type (ConfigElements), target :: elements
      type(Parser) :: p


      filters => elements%get_filters()
      formatters => elements%get_formatters()

      call filters%insert('filterA',Filter('A'))
      call filters%insert('filterB',Filter('B'))

      call formatters%insert('formatterA', Formatter('%(message)a'))
      call formatters%insert('formatterB', Formatter('%(level_name)a~: %(message)a'))

      open(newunit=unit, file='test_build_handler.txt', status='unknown', &
           & form='formatted')

      write(unitStr,'(i0)') unit

      p = Parser()
      handler_cfg = p%load(EscapedTextStream( &
           & " class: StreamHandler \n"// &
           & " unit: " // trim(unitStr) // "\n" // &
           & " formatter: formatterB \n" // &
           & " filters: [filterA] \n" // &
           & " level: INFO \n"))

      call build_handler(h, handler_cfg, elements)
      @assertEqual(INFO, h%get_level(),'incorrect level')

      block
        character(len=80) :: str
        type (LogRecord) :: record
        
        call initLogRecord(record, 'B', INFO, 'hello')
        call h%handle(record) ! skip - filter 'A'
        
        call initLogRecord(record, 'A', DEBUG, 'goodbye')
        call h%handle(record) ! skip - level is INFO
        
        call initLogRecord(record, 'A', INFO, 'ciao')
        call h%handle(record) ! keep
        
        rewind(unit)

        read(unit,'(a)') str
        @assertEqual('INFO: ciao', str)
      end block
      close(unit, status='delete')
      

   end subroutine test_build_handler

   @test
   subroutine test_build_handlers()
      use PFL_Filter
      use PFL_StreamHandler
      use PFL_Formatter

      type (Configuration) :: handlersCfg

      type (FilterMap), pointer :: filters
      type (FormatterMap), pointer :: formatters
      type (HandlerMap), pointer :: handlers
      type (ConfigElements), target :: elements
      type(Parser) :: p

      filters => elements%get_filters()
      formatters => elements%get_formatters()

      call filters%insert('filterA',Filter('A'))
      call filters%insert('filterB',Filter('B'))

      call formatters%insert('formatterA', Formatter('%(message)'))
      call formatters%insert('formatterB', Formatter('%(levelname)'))


      p = Parser()

      handlersCfg = p%load(EscapedTextStream( &
           & " A: \n" // &
           & "    class:  StreamHandler \n" // &
           & "    unit:  OUTPUT_UNIT   \n" // &
           & "    formatter:  formatterA    \n" // &
           & "    filters:  [filterA]     \n" // &
           & "    level:  INFO          \n" // &
           & " B:                        \n" // &
           & "    class:  StreamHandler \n" // &
           & "    unit:  OUTPUT_UNIT   \n" // &
           & "    formatter:  formatterB    \n" // &
           & "    filters:  [filterA, filterB] \n" // &
           & "    level:  CRITICAL \n"))

      call elements%build_handlers(handlersCfg)
      handlers => elements%get_handlers()
      @assertEqual(2, handlers%size())

   end subroutine test_build_handlers

@test
   subroutine test_build_logger_trivial()

      type (Configuration) :: cfg

      type (ConfigElements), target :: elements
      type (LoggerManager), target :: mgr
      class (Logger), pointer :: lgr
      type(OrderedStringUnlimitedMap) :: m

      cfg = Configuration(m)
      lgr => mgr%get_logger('A')
      ! cfg is empty by default
      call build_logger(lgr, cfg, elements)

   end subroutine test_build_logger_trivial

   @test
   subroutine test_build_logger()

      use PFL_Filter
      use PFL_AbstractHandler
      use PFL_FileHandler

      type (FilterMap), pointer :: filters
      type (HandlerMap), pointer :: handlers
      type (ConfigElements), target :: elements

      type (Configuration) :: cfg
      type (LoggerManager), target :: mgr
      class (Logger), pointer :: lgr
      type(OrderedStringUnlimitedMap) :: m

      filters => elements%get_filters()
      handlers => elements%get_handlers()

      call handlers%insert('handlerA', FileHandler('A', delay=.true.))
      call handlers%insert('handlerB', FileHandler('B', delay=.true.))

      call filters%insert('filterA', Filter('A'))
      call filters%insert('filterB', Filter('B'))

      lgr => mgr%get_logger('A')

      cfg = Configuration(m)
      call build_logger(lgr, cfg, elements)

   end subroutine test_build_logger

#ifdef _LOGGER_USE_MPI
@test(ifdef=_LOGGER_USE_MPI)
   subroutine test_build_logger_serial_in_mpi_context()
      use mpi
      use MockHandler
      use MockMpi
      use PFL_SeverityLevels
      use PFL_RootLogger

      type (LoggerManager), target :: mgr
      type (Configuration) :: cfg
      type (MockBuffer), target :: buffer
      class (Logger), pointer :: lgr
      type (MockHandler) :: h

      type (FilterMap), pointer :: filters
      type (FormatterMap), pointer :: formatters
      type (HandlerMap), pointer :: handlers
      type (ConfigElements), target :: elements

      integer :: comm = 0
      
      call set_mpi_rank(1) ! i.e., not root
      call set_mpi_size(2)

      h = MockHandler(buffer, level=INFO)

      handlers => elements%get_handlers()
      call handlers%insert('handlerA', h)

      cfg = Config([P('handlers','[handlerA]'),P('level','WARNING'),P('root_level','INFO')])

      mgr = LoggerManager(RootLogger(WARNING))
      lgr => mgr%get_logger('serial')
      call build_logger(lgr, cfg, elements)

      call lgr%info('message')
      @assertFalse(allocated(buffer%buffer))

   end subroutine test_build_logger_serial_in_mpi_context

@test(ifdef=_LOGGER_USE_MPI)
   subroutine test_build_logger_serial_comm()
      use mpi
      use PFL_RootLogger
      use MockHandler
      use MockMpi
      use PFL_SeverityLevels

      type (Configuration) :: cfg
      type (MockBuffer), target :: buffer2
      class (Logger), pointer :: lgr
      type (MockHandler) :: h
      type (Configuration), target :: extra

      type (FilterMap), pointer :: filters
      type (FormatterMap), pointer :: formatters
      type (HandlerMap), pointer :: handlers
      type (ConfigElements), target :: elements
      type (LoggerManager), target :: mgr
      

      integer :: comm ! fake comm

      call set_mpi_rank(0)
      call set_mpi_size(2)

      ! loggers:
      !     serial:
      !         handlers: [A]

      h = MockHandler(buffer2, level=INFO)
!!$      call elements%set_global_comm(0)
      handlers => elements%get_handlers()
      call handlers%insert('handlerA', h)

      cfg = Config([P('handlers','[handlerA]'),P('level','INFO')])
      extra = Config([p('comm', comm)])

      mgr = LoggerManager(RootLogger(WARNING))
      lgr => mgr%get_logger('serial')
      call build_logger(lgr, cfg, elements, extra=extra)

      call lgr%info('message')
      @assertEqual('INFO: serial: message',buffer2%buffer)
      
   end subroutine test_build_logger_serial_comm
#endif
   
!   @test
   subroutine test_basic_loggers_invalid_cfg()
      type (Configuration) :: cfg

      type (LoggerManager), target :: mgr
      class (Logger), pointer :: lgr
      character(len=:), allocatable :: expectedMessage

      type(Parser) :: p

      p = Parser()
      cfg = p%load(EscapedTextStream( &
           & "  schema_version: 1 \n" // &
           & "  loggers: 1 \n"))

      call mgr%load_config(cfg)

      lgr => mgr%get_logger('A')
      expectedMessage = "FTL::Config::toConfigPtr() - type of 'loggers' is not a Config."
      @assertExceptionRaised(expectedMessage)

   end subroutine test_basic_loggers_invalid_cfg

   @test
   subroutine test_basic_loggers()
      type (Configuration) :: cfg
      type (Configuration) :: loggers

      type (LoggerManager), target :: mgr
      class (Logger), pointer :: lgr
      type(Parser) :: p

      p = Parser()
      cfg = p%load(EscapedTextStream( &
           & "  schema_version: 1 \n" // &
           & "  loggers:   \n" // &
           & "      A:         \n" // &
           & "         level: DEBUG \n"))

      call mgr%load_config(cfg)
      lgr => mgr%get_logger('A')

      @assertEqual(DEBUG, lgr%get_level())

   end subroutine test_basic_loggers

#ifdef _LOGGER_USE_MPI
@test(ifdef=_LOGGER_USE_MPI)
   subroutine test_logger_root_level()
      use MockMpi
      use mpi
      type (Configuration) :: cfg
      type (Configuration) :: loggers

      type (LoggerManager), target :: mgr
      class (Logger), pointer :: lgr

      cfg = Config([ &
           &      p('schema_version', 1), &
           &      p('loggers', Config([p('A', Config([P('level','INFO'),P('root',1),P('root_level','DEBUG')]))])) &
           &     ])

      ! configure the mock layer
      call set_mpi_rank(0) ! is root
      call set_mpi_size(2)

      call mgr%load_config(cfg)
      lgr => mgr%get_logger('A')

      @assertEqual(DEBUG, lgr%get_level())

      ! configure the mock layer
      call set_mpi_rank(1) ! not root
      call set_mpi_size(2)

      call mgr%load_config(cfg)
      lgr => mgr%get_logger('A')

      @assertEqual(INFO, lgr%get_level())
      
   end subroutine test_logger_root_level
#endif
   
end module Test_Config
