module Test_Formatter_mod
   use pFUnit_mod
   use ASTG_Formatter_mod
   use iso_fortran_env
   use ASTG_LogRecord_mod
   
   implicit none

   public :: Test_Formatter
   
@TestCase
   type, extends(TestCase) :: Test_Formatter
      type (Formatter) :: f
   contains
      procedure :: setUp   
      procedure :: tearDown 
   end type Test_Formatter

contains

   
   subroutine setUp(this)
      class (Test_Formatter), intent(inout) :: this
      
   end subroutine setUp

   
   subroutine tearDown(this)
      class (Test_Formatter), intent(inout) :: this

   end subroutine tearDown


@Test
   subroutine test_string(this)
      class (Test_Formatter), intent(inout) :: this
            
      this%f = Formatter('')
      @assertEqual('Hello', this%f%toString('Hello'))
      
   end subroutine test_string


@Test
   subroutine test_int32(this)
      class (Test_Formatter), intent(inout) :: this
      
      this%f = Formatter('')
      @assertEqual('1', this%f%toString(1))
      
   end subroutine test_int32
   
@Test
   subroutine test_r32(this)
      class (Test_Formatter), intent(inout) :: this
      
      this%f = Formatter('')
      @assertEqual('32.00000', this%f%toString(32.))
      
   end subroutine test_r32
   

@Test
   subroutine test_r64(this)
      class (Test_Formatter), intent(inout) :: this
      
      this%f = Formatter('Hello')
      @assertEqual('64.000000000000000', this%f%toString(64.d0))
      
   end subroutine test_r64
   
@Test
   subroutine test_logical(this)
      class (Test_Formatter), intent(inout) :: this
      
      this%f = Formatter('')
      @assertEqual('T', this%f%toString(.true.))
      @assertEqual('F', this%f%toString(.false.))
      
   end subroutine test_logical
   
@Test
   subroutine test_cmp32(this)
      class (Test_Formatter), intent(inout) :: this
      
      this%f = Formatter('')
      @assertEqual('(0.000000,1.000000)', this%f%toString((0.,1.)))
      
   end subroutine test_cmp32

   
@Test
   subroutine test_toString_unsupported(this)
      class (Test_Formatter), intent(inout) :: this      
      character(len=:), allocatable :: logMessage

      type Foo
      end type Foo
      
      type (Foo) :: x

      this%f = Formatter('')
      logMessage = this%f%toString(x)

      @assertExceptionRaised('Logger::toString_other() not implemented.')
      
   end subroutine test_toString_unsupported


@Test
   subroutine test_format(this)
      use ASTG_SeverityLevels_mod, only: INFO
      class (Test_Formatter), intent(inout) :: this      
      character(len=:), allocatable :: logMessage

      this%f = Formatter('Hello')
      logMessage = this%f%format(LogRecord('name', INFO, 'Hello'))

   end subroutine test_format


end module Test_Formatter_mod
