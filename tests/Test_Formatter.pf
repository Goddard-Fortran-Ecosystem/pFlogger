module Test_Formatter_mod
   use pFUnit_mod
   use iso_fortran_env
   use ASTG_Formatter_mod
   use ASTG_SeverityLevels_mod
   use ASTG_LogRecord_mod
   use MockDateFormat_mod
   
   implicit none

   public :: Test_Formatter
   
@TestCase
   type, extends(TestCase) :: Test_Formatter
      type (Formatter) :: f
   contains
      procedure :: setUp   
      procedure :: tearDown 
   end type Test_Formatter

contains

   
   subroutine setUp(this)
      class (Test_Formatter), intent(inout) :: this
      this%f = Formatter()
      mockdf%Y = 2015
      mockdf%M = 1
      mockdf%D = 2
      mockdf%HH = 3
      mockdf%MM = 4
      mockdf%SS = 5
      mockdf%MS = 123
   end subroutine setUp

   
   subroutine tearDown(this)
      class (Test_Formatter), intent(inout) :: this
   end subroutine tearDown


! @Test
   subroutine test_string(this)
      class (Test_Formatter), intent(inout) :: this
            
      this%f = Formatter('')
      @assertEqual('Hello', this%f%toString('Hello'))
      
   end subroutine test_string


   @Test
   subroutine test_formatDefault(this)
      use FTL_XWrapVec_mod
      class (Test_Formatter), intent(inout) :: this
      type(LogRecord) :: record

      record = LogRecord('A', INFO, 'Goodbye')
      @assertEqual('Goodbye', this%f%format(record))
      
   end subroutine test_formatDefault
   

@Test
   subroutine test_formatint32(this)
      use FTL_XWrapVec_mod
      class (Test_Formatter), intent(inout) :: this
      type(LogRecord) :: record

      type (XWrapVec) :: args
      
      args = XWrapVec()
      call args%push_back_alt(1)
      record = LogRecord('A', INFO, 'Goodbye %i1.1', args=args)

      this%f = Formatter('Hello %(message::a)')
      @assertEqual('Hello Goodbye 1', this%f%format(record))
      
   end subroutine test_formatint32
   

@test
   subroutine test_datefmt(this)
      use FTL_CIStringXUMap_mod
      use ASTG_FormatParser_mod
      class (Test_Formatter), intent(inout) :: this
      type(FormatParser) :: parser
      type (CIStringXUMap) :: extra
      type (CIStringXUMapIter) :: iter
      type(LogRecord) :: record

      extra = CIStringXUMap()

      ! record has name, level and message + opt args and/or extra
      ! Format the specified record as text: format(record)
      record = LogRecord('someRec', INFO, 'datefmt', extra=extra)
      this%f = Formatter(fmt='%(asctime::a)', &
                         datefmt='%(Y::i4.4)-%(M::i2.2)-%(D::i2.2)')
      @assertEqual('2015-01-22', this%f%format(record))

   end subroutine test_datefmt


!@test
   subroutine test_DateFormatMessage(this)
      use FTL_CIStringXUMap_mod
      use ASTG_FormatParser_mod
      class (Test_Formatter), intent(inout) :: this
      type(FormatParser) :: parser
      type (CIStringXUMap) :: extra
      type (CIStringXUMapIter) :: iter
      type(LogRecord) :: record
      character(len=20) :: date
      
      extra = CIStringXUMap()

      ! record has name, level and message + opt args and/or extra
      record = LogRecord('recName', INFO, 'Hi', extra=extra)
      call mockdf%fillDateAndTime(record)
      this%f = Formatter('%(Y::i4.4)')
      
      ! Format the specified record as text: format(record)
      write(date, '(i4)') mockdf%Y
      @assertEqual('2015', this%f%format(record))

      record = LogRecord('recName', INFO, 'Hi', extra=extra)
      this%f = Formatter('%(M::i2.2)')
      write(date,'(i2.2)') mockdf%M
      @assertEqual(date, this%f%format(record))

      record = LogRecord('anotherName', INFO, 'Hi', extra=extra)
      this%f = Formatter('%(HH::i4.4)-%(MM::i2.2)-%(SS::i2.2)')
      write(date,'(i2.2,a,i2.2,a,i2.2)') mockdf%HH,'-',mockdf%MM,'-',mockdf%SS
      @assertEqual(date, this%f%format(record))

   end subroutine test_DateFormatMessage

@Test
   subroutine test_formatWithName(this)
      use FTL_XWrapVec_mod
      class (Test_Formatter), intent(inout) :: this
      type(LogRecord) :: record

      type (XWrapVec) :: args
      
      args = XWrapVec()
      call args%push_back_alt(1)

      record = LogRecord('A', INFO, 'Goodbye %i1.1', args=args)
      this%f = Formatter('%(name::a) %(message::a)')
      @assertEqual('A Goodbye 1', this%f%format(record))
      
   end subroutine test_formatWithName
   

@Test
   subroutine test_int32(this)
      class (Test_Formatter), intent(inout) :: this
      
      this%f = Formatter('')
      @assertEqual('1', this%f%toString(1))
      
   end subroutine test_int32
   
@Test
   subroutine test_r32(this)
      class (Test_Formatter), intent(inout) :: this
      
      this%f = Formatter('')
      @assertEqual('32.00000', this%f%toString(32.))
      
   end subroutine test_r32
   

@Test
   subroutine test_r64(this)
      class (Test_Formatter), intent(inout) :: this
      
      this%f = Formatter('')
      @assertEqual('64.000000000000000', this%f%toString(64.d0))
      
   end subroutine test_r64
   
@Test
   subroutine test_logical(this)
      class (Test_Formatter), intent(inout) :: this
      
      this%f = Formatter('')
      @assertEqual('T', this%f%toString(.true.))
      @assertEqual('F', this%f%toString(.false.))
      
   end subroutine test_logical
   
@Test
   subroutine test_cmp32(this)
      class (Test_Formatter), intent(inout) :: this
      
      this%f = Formatter('')
      @assertEqual('(0.000000,1.000000)', this%f%toString((0.,1.)))
      
   end subroutine test_cmp32

   
@Test
   subroutine test_toString_unsupported(this)
      class (Test_Formatter), intent(inout) :: this      
      character(len=:), allocatable :: logMessage

      type Foo
      end type Foo
      
      type (Foo) :: x

      this%f = Formatter('')
      logMessage = this%f%toString(x)

      @assertExceptionRaised('Logger::toString_other() not implemented.')
      
   end subroutine test_toString_unsupported


@Test
   subroutine test_format(this)
      use ASTG_SeverityLevels_mod, only: INFO
      class (Test_Formatter), intent(inout) :: this      
      character(len=:), allocatable :: logMessage

      this%f = Formatter('Hello')
      logMessage = this%f%format(LogRecord('name', INFO, 'Hello'))

   end subroutine test_format


end module Test_Formatter_mod
