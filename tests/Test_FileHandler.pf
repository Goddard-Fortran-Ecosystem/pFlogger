module Test_FileHandler_mod
   use ASTG_SeverityLevels_mod
   use ASTG_FileHandler_mod
   use ASTG_LogRecord_mod
   use pfunit_mod
   implicit none

@TestCase
   type, extends(TestCase) :: Test_FileHandler
      type (FileHandler) :: handler
   contains
      procedure :: setUp   
      procedure :: tearDown 
   end type Test_FileHandler

contains

   
   subroutine setUp(this)
      class (Test_FileHandler), intent(inout) :: this
      this%handler = FileHandler('logFile')
   end subroutine setUp

   
   subroutine tearDown(this)
      class (Test_FileHandler), intent(inout) :: this

      integer :: unit

      call this%handler%close()

      ! delete file
      open(newunit=unit, file='logfile', status='old')
      close(unit, status='delete')


   end subroutine tearDown

   
@Test
   subroutine test_emitBasic(this)
      class (Test_FileHandler), intent(inout) :: this   

      integer :: unit
      type (LogRecord) :: record
      character(len=32) :: foundMessage

      record = LogRecord('hello')
      call this%handler%emit(INFO, record)

      unit = this%handler%getUnit()
      rewind(unit)
      read(unit, '(a)') foundMessage

      @assertEqual('INFO: '//record%getMessage(), foundMessage)

   end subroutine test_emitBasic

   
@Test
   subroutine test_emitBelowThreshold(this)
      use iso_fortran_env, only: IOSTAT_END
      class (Test_FileHandler), intent(inout) :: this

      type (FileHandler) :: handler
      type (LogRecord) :: record
      character(len=32) :: foundMessage
      integer :: iostatus
      
      record = LogRecord('hello')
      call handler%setLevel(DEBUG)
      call this%handler%emit(DEBUG, record)

      rewind(this%handler%getUnit())
      read(this%handler%getUnit(),'(a)', IOSTAT=iostatus) foundMessage      

      @assertEqual(IOSTAT_END, iostatus)

   end subroutine test_emitBelowThreshold

   
@Test
   subroutine test_emitAboveThreshold(this)
      class (Test_FileHandler), intent(inout) :: this

      type (FileHandler) :: handler
      type (LogRecord) :: record
      character(len=32) :: foundMessage
      integer :: iostatus
      
      record = LogRecord('hello')
      call handler%setLevel(ERROR)
      call this%handler%emit(ERROR, record)

      rewind(this%handler%getUnit())
      read(this%handler%getUnit(),'(a)', IOSTAT=iostatus) foundMessage      
      @assertEqual('ERROR: '//record%getMessage(), foundMessage)

   end subroutine test_emitAboveThreshold

end module Test_FileHandler_mod

