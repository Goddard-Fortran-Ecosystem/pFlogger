module Test_StringUtilities_mod
   use pfunit_mod
   use ASTG_StringUtilities_mod, only: toLowerCase
   use ASTG_StringUtilities_mod, only: toUpperCase
   implicit none

   @testParameter
   type, extends(AbstractTestParameter) :: StringTestParameter
#ifndef __GFORTRAN__
      character(:), allocatable :: string
      character(:), allocatable :: lowerCase
      character(:), allocatable :: upperCase
#else
      character(80) :: string
      character(80) :: lowerCase
      character(80) :: upperCase
#endif
   contains
      procedure :: toString
   end type StringTestParameter

   @testCase(testParameters = {getParams()}, constructor=newTest_StringUtilities)
   type, extends(ParameterizedTestCase) :: Test_StringUtilities
#ifndef __GFORTRAN__
      character(:), allocatable :: string
      character(:), allocatable :: lowerCase
      character(:), allocatable :: upperCase
#else
      character(80) :: string
      character(80) :: lowerCase
      character(80) :: upperCase
#endif
   end type Test_StringUtilities


contains

   function getParams() result(params)
      type (StringTestParameter), allocatable :: params(:)
      
      params = [ &
        StringTestParameter('a','a','A'), &
        StringTestParameter('b','b','B'), & 
        StringTestParameter('A','a','A'), & 
        StringTestParameter('1','1','1'), & 
        StringTestParameter('+','+','+'), & 
        StringTestParameter('a1B2c3D4', 'a1b2c3d4', 'A1B2C3D4') &
        ]

   end function getParams

   function newTest_StringUtilities(tstParameter) result(aTest)
      type (Test_StringUtilities) :: aTest
      type (StringTestParameter), intent(in) :: tstParameter

      aTest%string = tstParameter%string
      aTest%lowerCase = tstParameter%lowerCase
      aTest%upperCase = tstParameter%upperCase
   end function newTest_StringUtilities

   @test
   subroutine test_toLowerCase(this)
      class (Test_StringUtilities), intent(inout) :: this

      @assertEqual(trim(this%lowerCase), trim(toLowerCase(this%string)))

   end subroutine test_toLowerCase


@test
   subroutine test_toUpperCase(this)
      class (Test_StringUtilities), intent(inout) :: this

      @assertEqual(this%upperCase, toUpperCase(this%string))

   end subroutine test_toUpperCase


   function toString(this) result(string)
      class (StringTestParameter), intent(in) :: this      
      character(:), allocatable :: string

      string = '{' // this%string // ',' // this%lowerCase // ',' // this%upperCase // '}'

   end function toString


end module Test_StringUtilities_mod
