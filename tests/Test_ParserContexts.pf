module Test_ParserContexts_mod
   use pFUnit_mod
   use ASTG_FormatToken_mod
   use ASTG_newFormatParser_mod
   implicit none

   @testParameter(constructor=newTestParameter)
   type, extends(AbstractTestParameter) :: TestParam
      ! in
      procedure (ContextInterface), nopass, pointer :: inContext
      character(len=:), allocatable :: inBuffer
      character(len=1) :: nextCharIn
      ! expected
      character(len=:), allocatable :: outBuffer
      procedure (ContextInterface), nopass, pointer :: outContext
      logical :: startNewToken
      type (FormatToken) :: token
   contains
      procedure :: toString
   end type TestParam
      

   @TestCase(constructor=newTestCase, testParameters={getParameters()})
   type, extends(ParameterizedTestCase) :: ContextsTestCase
      type (FormatParser) :: parser
      type (TestParam) :: param
   contains
      procedure :: setUp
      procedure :: tearDown
   end type ContextsTestCase

contains

   
   function getParameters() result(params)
      type (TestParam), allocatable :: params(:)

      type struct
         procedure (ContextInterface), nopass, pointer :: inContext
         character(len=:), allocatable :: inBuffer
         character(len=1) :: char
         character(len=:), allocatable :: outBuffer
         logical :: startNewToken
         procedure (ContextInterface), nopass, pointer :: outContext
      end type struct

      ! workaround for CPP "eating" backspaces
      character(len=*), parameter :: CPP_SAFE_ESCAPE = '\\'
      character(len=1), parameter :: ESCAPE = CPP_SAFE_ESCAPE(1:1)

      type (TestParam), allocatable :: textCases


      ! Here we have a long list of cases that specify input state
      ! (context, buffer) and expected output state (context, buffer,
      ! new token) for a given input character.  E.g. if the parser
      ! has the textContext then a regular character of text should
      ! not change the context and should just append the character to
      ! the buffer.

      ! Generally, as problems with the parsing are found, additional
      ! cases should be added below.

      procedure (ContextInterface), pointer :: TXC
      procedure (ContextInterface), pointer :: SQC
      procedure (ContextInterface), pointer :: DQC
      procedure (ContextInterface), pointer :: PSC
      procedure (ContextInterface), pointer :: KYC

      TXC => textContext
      SQC => singleQuoteContext
      DQC => doubleQuoteContext
      PSC => positionContext
      KYC => keywordContext

      params = [ &
           
           &   p( TXC,  '',    'a',    TXC, 'a'  )                            &
           & , p( TXC, 'a' ,   'b',    TXC, 'ab' )                            &
           & , p( TXC, 'a',    "'",    SQC, "a'" )                            &
           & , p( TXC, 'a',    '"',    DQC, 'a"' )                            &
           & , p( TXC, 'b',    '%',    PSC, '',      FormatToken(TEXT, 'a') ) &
           
           & , p( SQC, "a'b",  "'",    TXC, "a'b'")                           &
           & , p( DQC, 'a"b',  '"',    TXC, 'a"b"')                           &
           
           & , p( PSC, '',     '{',    KYC, '')                               &
           & , p( PSC, '%i3',  ' ',    TXC, '',      FormatToken(POSITION, 'i3') ) &
           & , p( PSC, '%i3', ESCAPE,  TXC, '',      FormatToken(POSITION, 'i3') ) &

           & ]


   contains
      
      function p(inContext, inBuffer, inChar, outContext, outBuffer, token)
         type (TestParam) :: p
         
         procedure (ContextInterface) :: inContext
         character(len=*), intent(in) :: inBuffer
         character(len=1), intent(in) :: inChar
         procedure (ContextInterface) :: outContext
         character(len=*) :: outBuffer
         type (FormatToken), optional, intent(in) :: token

         p%inContext => inContext
         p%inBuffer = inBuffer
         p%nextCharIn = inChar
         p%outBuffer = outBuffer
         p%outContext => outContext

         if (present(token)) then
            p%startNewToken = .true.
            p%token = token
         else
            p%startNewToken = .false.
         end if
      end function p

   end function getParameters


   function toString(this) result(str)
      character(len=:), allocatable :: str
      class (TestParam), intent(in) :: this
      
      character(len=:), allocatable :: message
      message = 'inBuffer=<' // this%inBuffer // '>'
      message = message // '; char=<' // this%nextCharIn // '>'
      str = message
   end function toString


   function newTestCase(param) result(tstCase)
      type (ContextsTestCase) :: tstCase
      type (TestParam) :: param

      tstCase%param = param

   end function newTestCase


   subroutine setUp(this)
      class (ContextsTestCase), intent(inout) :: this
      
      call this%parser%setContext(this%param%inContext)
      call this%parser%setBuffer(this%param%inBuffer)

   end subroutine setUp

   subroutine tearDown(this)
      class (ContextsTestCase), intent(inout) :: this
   end subroutine tearDown


!----------------
! Check that the output state of buffer is correct.
!----------------
@test
   subroutine test_outBuffer(this)
      class (ContextsTestCase), intent(inout) :: this

      character(len=:), pointer :: buffer

      call this%param%inContext(this%parser, this%param%nextCharIn)

      call this%parser%getBuffer(buffer)
      @assertEqual(this%param%outBuffer, buffer, whiteSpace=KEEP_ALL)

   end subroutine test_outBuffer


!----------------
! Check that the output state of context is correct.
!----------------
@test
   subroutine test_outContext(this)
      class (ContextsTestCase), intent(inout) :: this

      procedure (ContextInterface), pointer :: procPtr
      procedure (ContextInterface), pointer :: expectedPtr

      call this%param%inContext(this%parser, this%param%nextCharIn)

      call this%parser%getContext(procPtr)
      expectedPtr => this%param%outContext
      @assertTrue(associated(procPtr, expectedPtr), 'incorrect state transition')

   end subroutine test_outContext


!---------------------------------------------------------
! Check that a new token is created only when appropriate.
!---------------------------------------------------------
@test
   subroutine test_startNewToken(this)
      class (ContextsTestCase), intent(inout) :: this

      procedure (ContextInterface), pointer :: procPtr

      call this%param%inContext(this%parser, this%param%nextCharIn)

      if (this%param%startNewToken) then
         @assertEqual(1, this%parser%size())
      else
         @assertEqual(0, this%parser%size())
      end if

   end subroutine test_startNewToken


end module Test_ParserContexts_mod
