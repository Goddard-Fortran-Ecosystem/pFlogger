module Test_ParserContexts_mod
   use pFUnit_mod
   use ASTG_FormatToken_mod
   use ASTG_newFormatParser_mod
   use iso_c_binding, only: C_NULL_CHAR
   implicit none

   @testParameter(constructor=newTestParameter)
   type, extends(AbstractTestParameter) :: TestParam

      ! in
      procedure (ContextInterface), nopass, pointer :: inContext
      character(len=:), allocatable :: inBuffer
      character(len=1) :: nextChar

      ! expected
      character(len=:), allocatable :: outBuffer
      procedure (ContextInterface), nopass, pointer :: outContext
      logical :: startNewToken
      type (FormatToken) :: token
      character(len=:), allocatable :: errorMessage
   contains
      procedure :: toString
   end type TestParam
      

   @TestCase(constructor=newTestCase, testParameters={getParameters()})
   type, extends(ParameterizedTestCase) :: ContextsTestCase
      type (FormatParser) :: parser
      type (TestParam) :: param
   contains
      procedure :: setUp
      procedure :: tearDown
   end type ContextsTestCase

contains

   
   function getParameters() result(params)
      type (TestParam), allocatable :: params(:)

      type struct
         procedure (ContextInterface), nopass, pointer :: inContext
         character(len=:), allocatable :: inBuffer
         character(len=1) :: char
         character(len=:), allocatable :: outBuffer
         logical :: startNewToken
         procedure (ContextInterface), nopass, pointer :: outContext
      end type struct

      ! workaround for CPP "eating" backspaces
      character(len=*), parameter :: CPP_SAFE_ESCAPE = '\\'
      character(len=1), parameter :: ESCAPE = CPP_SAFE_ESCAPE(1:1)

      type (TestParam), allocatable :: textCases


      ! Here we have a long list of cases that specify input state
      ! (context, buffer) and expected output state (context, buffer,
      ! new token) for a given input character.  E.g. if the parser
      ! has the textContext then a regular character of text should
      ! not change the context and should just append the character to
      ! the buffer.

      ! Generally, as problems with the parsing are found, additional
      ! cases should be added below.

      procedure (ContextInterface), pointer :: TXC
      procedure (ContextInterface), pointer :: SQC
      procedure (ContextInterface), pointer :: DQC
      procedure (ContextInterface), pointer :: PSC
      procedure (ContextInterface), pointer :: KYC
      procedure (ContextInterface), pointer :: ESC

      TXC => textContext
      SQC => singleQuoteContext
      DQC => doubleQuoteContext
      PSC => positionContext
      KYC => keywordContext
      ESC => escapeContext

      params = [ &
           
           &   p( TXC,  '',    'a',    TXC, 'a'  )                            &
           & , p( TXC, 'a' ,   'b',    TXC, 'ab' )                            &
           & , p( TXC, 'a',    "'",    SQC, "a'" )                            &
           & , p( TXC, 'a',    '"',    DQC, 'a"' )                            &
           & , p( TXC, 'b',    '%',    PSC, '',      FormatToken(TEXT, 'b') ) &
           ! escape sequence
           & , p( TXC, 'b',    ESCAPE, ESC, 'b'  )                            &

           ! newline
           & , p( ESC, 'b',    'n',    TXC, 'b' // new_line('a') ) &
           
           ! quote contexts
           & , p( SQC, "a'b",  "x",    SQC, "a'bx")                           &
           & , p( SQC, "a'b",  "'",    TXC, "a'b'")                           &
           & , p( SQC, "a'b",  '"',    SQC, "a'b" // '"' )                    &

           & , p( DQC, 'a"b',  'x',    DQC, 'a"bx')                           &
           & , p( DQC, 'a"b',  '"',    TXC, 'a"b"')                           &
           & , p( DQC, 'a"b',  "'",    DQC, 'a"b' // "'" )                    &
           
           ! position context
           & , p( PSC,  'i',  '3',   PSC, 'i3')                              &
           & , p( PSC, 'i3',  ' ',    TXC, '',      FormatToken(POSITION, 'i3') ) &
           & , p( PSC, 'i3', ESCAPE,  TXC, '',      FormatToken(POSITION, 'i3') ) &
           ! looks like position but turns out to be a keyword
           & , p( PSC,   '',     '{',    KYC, '')                               & !

           ! keyword context
           & , p( KYC,        '',  'v', KYC, 'v')                                 &
           & , p( KYC,     'var',  ',', KYC, 'var,')                              &
           & , p( KYC,  'var,i3',  '}', TXC, '', FormatToken(KEYWORD, 'var', 'i3')) &

           ! Various checks on illegal formats

           ! (1) illegal terminations
           & , p( SQC, "a'b",  C_NULL_CHAR,    illegalContext, "a'b", &
           &   errorMessage='FormatParser::singleQuoteContext() - unclosed single quote') &
           & , p( DQC, 'a"b',  C_NULL_CHAR,    illegalContext, 'a"b', &
           &   errorMessage='FormatParser::doubleQuoteContext() - unclosed double quote') &
           & , p( PSC,   '',  C_NULL_CHAR,     illegalContext, '', &
           &   errorMessage='FormatParser::positionContext() - empty edit descriptor') &
           & , p( KYC,   'abc',  C_NULL_CHAR,     illegalContext, 'abc', &
           &   errorMessage='FormatParser::keywordContext() - missing edit descriptor') &
           & , p( KYC,   'abc,',  C_NULL_CHAR,     illegalContext, 'abc,', &
           &   errorMessage='FormatParser::keywordContext() - empty edit descriptor') &
           & , p( KYC,   'abc,i2',  C_NULL_CHAR,     illegalContext, 'abc,i2', &
           &   errorMessage='FormatParser::keywordContext() - missing "}"') &

           ! Cannot switch to keyword once there is a format descriptor
           & , p( PSC, 'i3',     '{',    illegalContext, 'i3', &
           &      errorMessage='FormatParser::positionContext() - illegal start of keyword format: "i3{"') & !
           & , p( KYC,        '',  ',', illegalContext, ',',  &
           &  errorMessage='FormatParser::keywordContext() - missing keyword?') &
           ! Backslash is a permitted Fortran format specifier
           & , p( KYC,  'var,i3,', ESCAPE,   KYC, 'var,i3,'//ESCAPE) &
           & , p( KYC,  'va', ESCAPE,   illegalContext, 'va', &
           &      errorMessage='FormatParser::keywordContext() - no escape sequence permitted.') &

           & ]


   contains
      
      function p(inContext, inBuffer, char, outContext, outBuffer, token, errorMessage)
         type (TestParam) :: p
         
         procedure (ContextInterface) :: inContext
         character(len=*), intent(in) :: inBuffer
         character(len=1), intent(in) :: char
         procedure (ContextInterface) :: outContext
         character(len=*) :: outBuffer
         type (FormatToken), optional, intent(in) :: token
         character(len=*), optional, intent(in) :: errorMessage

         p%inContext => inContext
         p%inBuffer = inBuffer
         p%nextChar = char
         p%outBuffer = outBuffer
         p%outContext => outContext

         if (present(token)) then
            p%startNewToken = .true.
            p%token = token
         else
            p%startNewToken = .false.
         end if

         if (present(errormessage)) then
            p%errorMessage = errorMessage
         end if
      end function p

   end function getParameters


   function toString(this) result(str)
      character(len=:), allocatable :: str
      class (TestParam), intent(in) :: this
      
      character(len=:), allocatable :: message
      procedure(ContextInterface), pointer :: p1, p2, p3, p4, p5, p

      message = 'in context='
      p1 => textContext
      p2 => singleQuoteContext
      p3 => doubleQuoteContext
      p4 => positionContext
      p5 => keywordContext

      p => this%inContext
      if (associated(p, p1)) then
         message = message // 'textContext' // new_line('a')
      elseif (associated(p, p2)) then
            message = message // 'singleQuoteContext' // new_line('a')
      elseif (associated(p, p3)) then
            message = message // 'doubleQuoteContext' // new_line('a')
      elseif (associated(p, p4)) then
         message = message // 'positionContext' // new_line('a')
      elseif (associated(p, p5)) then
         message = message // 'keywordContext' // new_line('a')
      end if

      message = message // 'inBuffer=<' // this%inBuffer // '>'
      message = message // '; char=<' // this%nextChar // '>'

      str = message

   end function toString


   function newTestCase(param) result(tstCase)
      type (ContextsTestCase) :: tstCase
      type (TestParam) :: param

      tstCase%param = param

   end function newTestCase


   subroutine setUp(this)
      class (ContextsTestCase), intent(inout) :: this
      
      call this%parser%setContext(this%param%inContext)
      call this%parser%setBuffer(this%param%inBuffer)

      call this%param%inContext(this%parser, this%param%nextChar)
      if (allocated(this%param%errorMessage)) then
         @assertExceptionRaised(this%param%errorMessage)
      end if

   end subroutine setUp

   subroutine tearDown(this)
      class (ContextsTestCase), intent(inout) :: this
   end subroutine tearDown


!----------------
! Check that the output state of buffer is correct.
!----------------
@test
   subroutine test_outBuffer(this)
      class (ContextsTestCase), intent(inout) :: this

      character(len=:), pointer :: buffer

      call this%parser%getBuffer(buffer)
      @assertEqual(this%param%outBuffer, buffer, whiteSpace=KEEP_ALL)

   end subroutine test_outBuffer


!----------------
! Check that the output state of context is correct.
!----------------
@test
   subroutine test_outContext(this)
      class (ContextsTestCase), intent(inout) :: this

      procedure (ContextInterface), pointer :: procPtr
      procedure (ContextInterface), pointer :: expectedPtr

      call this%parser%getContext(procPtr)
      expectedPtr => this%param%outContext
      @assertTrue(associated(procPtr, expectedPtr), 'incorrect state transition')

   end subroutine test_outContext


!---------------------------------------------------------
! Check that a new token is created only when appropriate.
!---------------------------------------------------------
@test
   subroutine test_startNewToken(this)
      class (ContextsTestCase), intent(inout) :: this

      procedure (ContextInterface), pointer :: procPtr
      type (FormatToken), pointer :: token

      if (this%param%startNewToken) then
         @assertEqual(1, this%parser%size())
         token => this%parser%at(1)
         @assertEqual(this%param%token%type, token%type, 'incorrect token type')

         select case (this%param%token%type)
         case (TEXT)
            @assertEqual(this%param%token%text, token%text)
         case (POSITION)
            @assertEqual(this%param%token%formatSpecifier, token%formatSpecifier)
         case (KEYWORD)
            @assertEqual(this%param%token%text, token%text)
            @assertEqual(this%param%token%text, token%text)
         end select

      else
         @assertEqual(0, this%parser%size())
      end if

   end subroutine test_startNewToken


end module Test_ParserContexts_mod
