module Test_ParserContexts_mod
   use pFUnit_mod
   use ASTG_FormatToken_mod
   use ASTG_newFormatParser_mod

   @testParameter(constructor=newTestParameter)
   type, extends(AbstractTestParameter) :: TestParam
      ! in
      procedure (ContextInterface), nopass, pointer :: contextIn
      character(len=:), allocatable :: bufferIn
      character(len=1) :: nextCharIn
      ! expected
      character(len=:), allocatable :: bufferOut
      logical :: startNewToken
      procedure (ContextInterface), nopass, pointer :: contextOut
   contains
      procedure :: toString
   end type TestParam
      

   @TestCase(constructor=newTestCase, testParameters={getParameters()})
   type, extends(ParameterizedTestCase) :: ContextsTestCase
      type (FormatParser) :: parser
      type (TestParam) :: param
   contains
      procedure :: setUp
      procedure :: tearDown
   end type ContextsTestCase

contains

   
   function getParameters() result(params)
      type (TestParam), allocatable :: params(:)

      type struct
         procedure (ContextInterface), nopass, pointer :: contextIn
         character(len=:), allocatable :: bufferIn
         character(len=1) :: char
         character(len=:), allocatable :: bufferOut
         logical :: startNewToken
         procedure (ContextInterface), nopass, pointer :: contextOut
      end type struct

      ! workaround for CPP "eating" backspaces
      character(len=*), parameter :: CPP_SAFE_ESCAPE = '\\'
      character(len=1), parameter :: ESCAPE = CPP_SAFE_ESCAPE(1:1)

      params = [ &
           & makeParam(textContext, '', 'a', 'a', .false., textContext) &
           & ,makeParam(textContext, 'a', 'b', 'ab', .false., textContext) &
           & ,makeParam(textContext, 'a', "'", "a'", .false., singleQuoteContext) &
           & ,makeParam(textContext, 'a', '"', 'a"', .false., doubleQuoteContext) &
           
           & ,makeParam(singleQuoteContext, "a'b", "'", "a'b'", .false., textContext) &
           & ,makeParam(doubleQuoteContext, 'a"b', '"', 'a"b"', .false., textContext) &

           & ,makeParam(textContext, '', '%', '', .false., positionFormatContext) &
           & ,makeParam(positionFormatContext, '', '{', '', .false., keywordFormatContext) &

           & ,makeParam(positionFormatContext, '%i3', ' ', ' ', .true., textContext) &
           & ,makeParam(positionFormatContext, '%i3', ESCAPE, '', .true., textContext) &

           & ]

   contains
      
      function makeParam(contextIn, bufferIn, nextCharIn, &
           & bufferOut, startNewToken, contextOut) result(param)
         type (TestParam) :: param
         
         procedure (ContextInterface) :: contextIn
         character(len=*) :: bufferIn
         character(len=1) :: nextCharIn
         character(len=*) :: bufferOut
         logical :: startNewToken
         procedure (ContextInterface) :: contextOut

         param%contextIn => contextIn
         param%bufferIn = bufferIn
         param%nextCharIn = nextCharIn
         param%bufferOut = bufferOut
         param%startNewToken = startNewToken
         param%contextOut => contextOut
      end function makeParam

   end function getParameters


   function toString(this) result(str)
      character(len=:), allocatable :: str
      class (TestParam), intent(in) :: this
      
      character(len=:), allocatable :: message
      message = 'bufferIn=<' // this%bufferIn // '>'
      message = message // '; char=<' // this%nextCharIn // '>'
      str = message
   end function toString


   function newTestCase(param) result(tstCase)
      type (ContextsTestCase) :: tstCase
      type (TestParam) :: param

      tstCase%param = param

   end function newTestCase


   subroutine setUp(this)
      class (ContextsTestCase), intent(inout) :: this
      
      call this%parser%setContext(this%param%contextIn)
      call this%parser%setBuffer(this%param%bufferIn)

   end subroutine setUp

   subroutine tearDown(this)
      class (ContextsTestCase), intent(inout) :: this
   end subroutine tearDown


@test
   subroutine test_outBuffer(this)
      class (ContextsTestCase), intent(inout) :: this

      character(len=:), pointer :: buffer

      call this%param%contextIn(this%parser, this%param%nextCharIn)

      call this%parser%getBuffer(buffer)
      @assertEqual(this%param%bufferOut, buffer, whiteSpace=KEEP_ALL)

   end subroutine test_outBuffer


@test
   subroutine test_outContext(this)
      class (ContextsTestCase), intent(inout) :: this

      procedure (ContextInterface), pointer :: procPtr
      procedure (ContextInterface), pointer :: expectedPtr

      call this%param%contextIn(this%parser, this%param%nextCharIn)

      call this%parser%getContext(procPtr)
      expectedPtr => this%param%contextOut
      @assertTrue(associated(procPtr, expectedPtr), 'incorrect state transition')

   end subroutine test_outContext


@test
   subroutine test_startNewToken(this)
      class (ContextsTestCase), intent(inout) :: this

      procedure (ContextInterface), pointer :: procPtr

      call this%param%contextIn(this%parser, this%param%nextCharIn)

      if (this%param%startNewToken) then
         @assertEqual(1, this%parser%size())
      else
         @assertEqual(0, this%parser%size())
      end if

   end subroutine test_startNewToken


end module Test_ParserContexts_mod
