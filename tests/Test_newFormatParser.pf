module Test_newFormatParser_mod
   use pFUnit_mod
   use ASTG_NewFormatParser_mod
   use ASTG_FormatToken_mod
   implicit none

contains


@test
   subroutine test_trivial()
      type (FormatParser) :: p

      p = FormatParser()
      call p%parse('')
      @assertEqual(0, p%size())


   end subroutine test_trivial

@test
   subroutine test_simple()
      type (FormatParser) :: p
      type (FormatToken), pointer :: t

      p = FormatParser()
      call p%parse('a')
      @assertEqual(1, p%size())

      t => p%at(1)
      @assertEqual(TEXT, t%type)
      @assertEqual('a', t%text)

   end subroutine test_simple


@test
   subroutine test_multipleTokens()
      type (FormatParser) :: p
      type (FormatToken), pointer :: t

      p = FormatParser()
      call p%parse('word %i3 %{key,a}\n other')
      @assertEqual(5, p%size())

      t => p%at(1)
      @assertEqual(TEXT, t%type)
      @assertEqual('word ', t%text, whitespace=KEEP_ALL)

      t => p%at(2)
      @assertEqual(POSITION, t%type)
      @assertEqual('i3 ', t%editDescriptor, whitespace=KEEP_ALL)

      t => p%at(3)
      @assertEqual(TEXT, t%type)
      @assertEqual(' ', t%text, whitespace=KEEP_ALL)

      t => p%at(4)
      @assertEqual(KEYWORD, t%type)
      @assertEqual('key', t%text, whitespace=KEEP_ALL)
      @assertEqual('a', t%editDescriptor, whitespace=KEEP_ALL)

      t => p%at(5)
      @assertEqual(TEXT, t%type)
      @assertEqual(new_line('a') // ' other', t%text, whitespace=KEEP_ALL)

   end subroutine test_multipleTokens
   

@test
   subroutine test_multipleTokensB()
      type (FormatParser) :: p
      type (FormatToken), pointer :: t

      p = FormatParser()
      call p%parse('word %i3 %f6.8\%{key,a}%{key2,a5}')
      @assertEqual(6, p%size())

      t => p%at(1)
      @assertEqual(TEXT, t%type)
      @assertEqual('word ', t%text, whitespace=KEEP_ALL)

      t => p%at(2)
      @assertEqual(POSITION, t%type)
      @assertEqual('i3 ', t%editDescriptor, whitespace=KEEP_ALL)

      t => p%at(3)
      @assertEqual(TEXT, t%type)
      @assertEqual(' ', t%text, whitespace=KEEP_ALL)

      t => p%at(4)
      @assertEqual(POSITION, t%type)
      @assertEqual('f6.8', t%editDescriptor, whitespace=KEEP_ALL)

      t => p%at(5)
      @assertEqual(KEYWORD, t%type)
      @assertEqual('key', t%text, whitespace=KEEP_ALL)
      @assertEqual('a', t%editDescriptor, whitespace=KEEP_ALL)

      t => p%at(6)
      @assertEqual(KEYWORD, t%type)
      @assertEqual('key2', t%text, whitespace=KEEP_ALL)
      @assertEqual('a5', t%editDescriptor, whitespace=KEEP_ALL)

   end subroutine test_multipleTokensB
   

@test
   subroutine test_format()
      use ASTG_CIStringUnlimitedMap_mod, only: CIStringUnlimitedMap => Map
      type (FormatParser) :: p
      type (FormatToken), pointer :: t

      type (CIStringUnlimitedMap) :: extra

      call extra%insert('i',1)
      call extra%insert('x',1.234)
      call extra%insert('f',.false.)
      call extra%insert('s','word')

      @assertEqual('x', format('x'))
      @assertEqual('i 009', format('i %i3.3', 9))
      @assertEqual('i= 1 f= F s=word x=  1.23', format('i=%{i,i2} f=%{f,*} s=%{s,a} x=%{x,f6.2}', extra=extra))

   end subroutine test_format
   

end module Test_newFormatParser_mod
