module Test_newFormatParser_mod
   use pFUnit_mod
   use ASTG_NewFormatParser_mod
   use ASTG_FormatToken_mod
   implicit none

contains


@test
   subroutine test_textHandlerDefault()
      type (FormatParser) :: parser
      type (FormatToken) :: token
      procedure (HandlerInterface), pointer :: procPtr
      character(len=:), pointer :: buffer

      parser = FormatParser()

      call parser%parseCharacter('a')
      call parser%getBuffer(buffer)
      @assertEqual('a', buffer)
      call parser%getHandler(procPtr)
      @assertTrue(associated(procPtr, textHandler), 'state should remain text')

      ! And again
      call parser%parseCharacter('-')
      call parser%getBuffer(buffer)
      @assertEqual('a-', buffer)
      call parser%getHandler(procPtr)
      @assertTrue(associated(procPtr, textHandler), 'state should remain text')

   end subroutine test_textHandlerDefault


@test
   subroutine test_textStartSingleQuote()
      type (FormatParser) :: parser
      type (FormatToken) :: token
      procedure (HandlerInterface), pointer :: procPtr
      character(len=:), pointer :: buffer

      parser = FormatParser()

      call parser%parse("a'") ! single quote
      call parser%getBuffer(buffer)
      @assertEqual("a'", buffer)
      call parser%getHandler(procPtr)
      @assertTrue(associated(procPtr, singleQuoteHandler), 'state should now be single quote')

      parser = FormatParser()
      call parser%parse("a'b")
      call parser%getBuffer(buffer)
      @assertEqual("a'b", buffer)

   end subroutine test_textStartSingleQuote

@test
   subroutine test_textMatchSingleQuote()
      type (FormatParser) :: parser
      type (FormatToken) :: token
      procedure (HandlerInterface), pointer :: procPtr
      character(len=:), pointer :: buffer

      parser = FormatParser()

      call parser%parse("a'b'") ! single quotes

      call parser%getBuffer(buffer)
      @assertEqual("a'b'", buffer)
      call parser%getHandler(procPtr)
      @assertTrue(associated(procPtr, textHandler), 'context changes back to text')

   end subroutine test_textMatchSingleQuote


@test
   subroutine test_textStartDoubleQuote()
      type (FormatParser) :: parser
      type (FormatToken) :: token
      procedure (HandlerInterface), pointer :: procPtr
      character(len=:), pointer :: buffer

      parser = FormatParser()

      call parser%parse('a"') ! double quote
      call parser%getBuffer(buffer)
      @assertEqual('a"', buffer)
      call parser%getHandler(procPtr)
      @assertTrue(associated(procPtr, doubleQuoteHandler), 'state should now be doubleQuote')

      call parser%parse('b')
      call parser%getBuffer(buffer)
      @assertEqual('a"b', buffer)

   end subroutine test_textStartDoubleQuote

@test
   subroutine test_textMatchDoubleQuote()
      type (FormatParser) :: parser
      type (FormatToken) :: token
      procedure (HandlerInterface), pointer :: procPtr
      character(len=:), pointer :: buffer

      parser = FormatParser()

      call parser%parse('a"b"')

      call parser%getBuffer(buffer)
      @assertEqual('a"b"', buffer)
      call parser%getHandler(procPtr)
      @assertTrue(associated(procPtr, textHandler), 'context changes back to text')

   end subroutine test_textMatchDoubleQuote


@test
   subroutine test_textStartPositionFormat()
      type (FormatParser) :: parser
      type (FormatToken) :: token
      procedure (HandlerInterface), pointer :: procPtr
      character(len=:), pointer :: buffer
      type (FormatToken), pointer :: t

      parser = FormatParser()
      call parser%parse('a%')

      call parser%getHandler(procPtr)
      @assertTrue(associated(procPtr, positionFormatHandler), 'context changes to position format')

      ! previous token should have terminated
      call parser%getBuffer(buffer)
      @assertEqual('', buffer)
      @assertEqual(1, parser%size())
      t => parser%at(1)
      @assertEqual(TEXT, t%type)
      @assertEqual('a', t%textString)
   end subroutine test_textStartPositionFormat

end module Test_newFormatParser_mod
