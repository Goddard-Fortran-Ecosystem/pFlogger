module Test_FormatParser_mod
   use FTL_StringVec_mod
   use pFUnit_mod
   use ASTG_FormatParser_mod
   
   implicit none

contains

   @test
   subroutine test_isFormat()
      type(FormatParser) :: parser
      
      @assertFalse(parser%isFormat('A'))
      @assertTrue(parser%isFormat('%a'))
      
   end subroutine test_isFormat


   @test
   subroutine test_countTokens()
      type(FormatParser) :: parser
      type(StringVec) :: tokens

      tokens = parser%getTokens('')
      @assertEqual(0, tokens%size())
      
      tokens = parser%getTokens('a')
      @assertEqual(1, tokens%size())

      tokens = parser%getTokens('a ')
      @assertEqual(1, tokens%size())      

      tokens = parser%getTokens('a b')
      @assertEqual(1, tokens%size())      
      
      tokens = parser%getTokens(' a')
      @assertEqual(1, tokens%size())      
      
      tokens = parser%getTokens('%a')
      @assertEqual(1, tokens%size())      
      
      tokens = parser%getTokens('a %a')
      @assertEqual(2, tokens%size())      
      
      tokens = parser%getTokens('a%a')
      @assertEqual(2, tokens%size())      
      
   end subroutine test_countTokens

   @test
   subroutine test_getTokens()
      use FTL_String_mod
      type(FormatParser) :: parser
      type(StringVec) :: tokens
      
      tokens = parser%getTokens('a')
      @assertTrue(String('a') == tokens%at(1))

      tokens = parser%getTokens(' a')
      @assertTrue(String(' a') == tokens%at(1))
      
      tokens = parser%getTokens('a ')
      @assertTrue(String('a ') == tokens%at(1))      
      

   end subroutine test_getTokens

end module Test_FormatParser_mod
