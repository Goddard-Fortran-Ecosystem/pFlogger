module Test_FormatParser_mod
   use FTL_String_mod
   use FTL_StringVec_mod
   use pFUnit_mod
   use ASTG_FormatParser_mod
   
   implicit none

contains

   @test
   subroutine test_isFormat()
      type(FormatParser) :: parser
      
      @assertFalse(parser%isFormat('A'))
      @assertTrue(parser%isFormat('%a'))
      @assertFalse(parser%isFormat('\%'))
      @assertFalse(parser%isFormat('\%a'))
      
   end subroutine test_isFormat


   ! Cannot parse an empty string
   @test
   subroutine test_illegalString()
      type(FormatParser) :: parser
      character(len=:), allocatable :: str

      str = parser%getToken('')
      @assertExceptionRaised("Illegal - empty string in FormatParser.")

   end subroutine test_illegalString


   @test
   subroutine test_startOfNextToken()
      type(FormatParser) :: parser
      
      @assertEqual(2, parser%startOfNextToken('a'))
      @assertEqual(3, parser%startOfNextToken('ab'))
      @assertEqual(4, parser%startOfNextToken('a b'))

      @assertEqual(2, parser%startOfNextToken('a%2.1'))
      @assertEqual(2, parser%startOfNextToken(' %2.1'))

      @assertEqual(2, parser%startOfNextToken('%'))
      @assertEqual(10, parser%startOfNextToken('\% other '))
      @assertEqual(3, parser%startOfNextToken('%a a'))
      @assertEqual(6, parser%startOfNextToken('%i2.1 hello'))
      @assertEqual(8, parser%startOfNextToken('%(i2.1) hello'))

   end subroutine test_startOfNextToken
   
   @test
   subroutine test_getToken()
      type(FormatParser) :: parser
      
      @assertEqual('a', parser%getToken('a'))
      @assertEqual('ab', parser%getToken('ab'))
      @assertEqual('a b', parser%getToken('a b'))

      @assertEqual('a', parser%getToken('a%2.1'))
      @assertEqual(' ', parser%getToken(' %2.1'))

      @assertEqual('%', parser%getToken('%'))
      @assertEqual('\%a', parser%getToken('\%a'))
      @assertEqual('%', parser%getToken('% other '))
      @assertEqual('%a', parser%getToken('%a a'))
      @assertEqual('%i2.1', parser%getToken('%i2.1 hello'))
      @assertEqual('%(i2.1)', parser%getToken('%(i2.1) hello'))

   end subroutine test_getToken
   
   @test
   subroutine test_countTokens()
      type(FormatParser) :: parser
      type(StringVec) :: tokens

      tokens = parser%getTokens('')
      @assertEqual(0, tokens%size())
      
      tokens = parser%getTokens('a')
      @assertEqual(1, tokens%size())

      tokens = parser%getTokens('a ')
      @assertEqual(1, tokens%size())      

      tokens = parser%getTokens('a b')
      @assertEqual(1, tokens%size())      
      
      tokens = parser%getTokens(' a')
      @assertEqual(1, tokens%size())      
      
      tokens = parser%getTokens('%a')
      @assertEqual(1, tokens%size())      
      
      tokens = parser%getTokens('a %a')
      @assertEqual(2, tokens%size())      
      
      tokens = parser%getTokens('a%a')
      @assertEqual(2, tokens%size())      

   end subroutine test_countTokens

   @test
   subroutine test_getTokens()
      use FTL_String_mod
      type(FormatParser) :: parser
      type(StringVec) :: tokens

      tokens = parser%getTokens('a')
      @assertTrue(String('a') == tokens%at(1))

      tokens = parser%getTokens(' a')
      @assertTrue(String(' a') == tokens%at(1))

      tokens = parser%getTokens('a ')
      @assertTrue(String('a ') == tokens%at(1))      
      
      tokens = parser%getTokens('hello %i2.1')
      @assertTrue(String('hello ') == tokens%at(1))
      @assertTrue(String('%i2.1') == tokens%at(2))

      tokens = parser%getTokens('hello %i2.1 other words %a ')
      @assertTrue(String('hello ') == tokens%at(1))
      @assertTrue(String('%i2.1') == tokens%at(2))
      @assertTrue(String(' other words ') == tokens%at(3))
      @assertTrue(String('%a') == tokens%at(4))
      @assertTrue(String('') == tokens%at(5))

      tokens = parser%getTokens('hello %(i2.1)other words %a ')
      @assertTrue(String('hello ') == tokens%at(1))
      @assertTrue(String('%(i2.1)') == tokens%at(2))
      @assertTrue(String('other words ') == tokens%at(3))
      @assertTrue(String('%a') == tokens%at(4))
      @assertTrue(String('') == tokens%at(5))


      
   end subroutine test_getTokens

end module Test_FormatParser_mod
