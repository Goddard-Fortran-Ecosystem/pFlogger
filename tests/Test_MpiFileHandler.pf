module Test_MpiFileHandler_mod
   use PFL_SeverityLevels_mod
   use PFL_MpiFileHandler_mod
   use PFL_LogRecord_mod
   use MockMpi_mod
   use pfunit_mod
   implicit none

contains

@test
   subroutine test_suffix()
      type (MpiFileHandler) :: handler
      integer :: comm

      comm = 12345 ! fake

      @assertEqual('.pe=0', handler%getSuffix(rank=0))
      @assertEqual('.pe=1', handler%getSuffix(rank=1))
      @assertEqual('.pe=123', handler%getSuffix(rank=123))

   end subroutine test_suffix


@test
   subroutine test_customSuffix()
      type (MpiFileHandler) :: handler
      integer :: comm

      comm = 12345 ! fake

      @assertEqual('.000000', handler%getSuffix(rank=0, suffixFormat= '.%i6.6'))
      @assertEqual('.000123', handler%getSuffix(rank=123, suffixFormat= '.%i6.6'))

   end subroutine test_customSuffix
   

@Test
   subroutine test_getFileName()
      type (MpiFileHandler) :: handler
      character(len=32) :: foundMessage
      integer :: comm
      integer :: unit

      comm = 12345

      call set_mpi_rank(0)
      handler = MpiFileHandler('logFile', comm)
      @assertEqual('logFile.pe=0', handler%getFileName())
      call handler%close()

      open(newunit=unit,file='logFile.pe=0', status='old')
      close(unit, status='delete')

      call set_mpi_rank(47)
      handler = MpiFileHandler('logFile', comm, suffixFormat='_%i3.3')
      @assertEqual('logFile_047', handler%getFileName())
      call handler%close()

      open(newunit=unit,file='logFile_047', status='old')
      close(unit, status='delete')

   end subroutine test_getFileName


   ! Often it is desirable for the log file not to be created until/if
   ! a message is sent.  The optional logical argument "delay" on the
   ! contstructor is used to indicate that configuration.
   @test
   subroutine test_delay()
      type (LogRecord) :: record
      type (MpiFileHandler) :: handler
      character(len=*), parameter :: PREFIX = 'delayLog'
      character(len=*), parameter :: FILE_NAME = 'delayLog' // '.pe=0'
      logical :: exist
      integer :: unit
      integer :: comm

      call set_mpi_rank(0)
      comm = 12345
      handler = MpiFileHandler(PREFIX, comm, delay=.true.)
      inquire(file=FILE_NAME, exist=exist)
      @assertFalse(exist)

      call initLogRecord(record, 'me', INFO, 'hello')
      call handler%handle(record)
      inquire(file=FILE_NAME, exist=exist)
      @assertTrue(exist)
      
      call handler%close()
      open(newunit=unit, file=FILE_NAME, status='old')
      close(unit, status='delete')

   end subroutine test_delay

   @test
   subroutine test_setDefaultSuffix()
      type (MpiFileHandler) :: handler
      character(len=32) :: foundMessage
      integer :: comm
      integer :: unit

      comm = 12345

      call set_mpi_rank(123)
      call setDefaultMpiSuffixFormat('.%i4.4') ! warning - global setting

      handler = MpiFileHandler('logFile', comm, delay=.true.)
      @assertEqual('logFile.0123', handler%getFileName())

   end subroutine test_setDefaultSuffix


end module Test_MpiFileHandler_mod

