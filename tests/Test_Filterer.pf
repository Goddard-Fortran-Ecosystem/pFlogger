module Test_Filterer_mod
   use pFUnit_mod
   use ASTG_Filterer_mod
   use ASTG_Filter_mod
   use ASTG_LogRecord_mod
   use ASTG_SeverityLevels_mod, only: INFO
   implicit none


contains

   @test
   subroutine test_filterNoFilters()
      type (Filterer) :: f
      type (LogRecord) :: record

      f = Filterer()
      record = LogRecord('A', INFO, 'message')
      @assertTrue(f%filter(record))

   end subroutine test_filterNoFilters
   

   @test
   subroutine test_filterMismatch()
      type (Filterer) :: f
      type (LogRecord) :: record

      f = Filterer()
      call f%addFilter(Filter('A'))
      record = LogRecord('B', INFO, 'message')
     
      @assertFalse(f%filter(record))

   end subroutine test_filterMismatch


   @test
   subroutine test_filterMatch()
      type (Filterer) :: f
      type (LogRecord) :: record

      f = Filterer()
      call f%addFilter(Filter('A'))
      record = LogRecord('A', INFO, 'message')
      @assertTrue(f%filter(record))

   end subroutine test_filterMatch

   @test
   subroutine test_filterCombo()
      type (Filterer) :: f
      type (LogRecord) :: record

      f = Filterer()
      call f%addFilter(Filter('A'))
      call f%addFilter(Filter('B'))

      record = LogRecord('A', INFO, 'message')
      @assertFalse(f%filter(record))

      record = LogRecord('B', INFO, 'message')
      @assertFalse(f%filter(record))

   end subroutine test_filterCombo

   @test
   subroutine test_filterComboB()
      type (Filterer) :: f
      type (LogRecord) :: record

      f = Filterer()
      call f%addFilter(Filter('A'))
      call f%addFilter(Filter('AB'))

      record = LogRecord('AB', INFO, 'message')
      @assertTrue(f%filter(record))

      record = LogRecord('B', INFO, 'message')
      @assertFalse(f%filter(record))

   end subroutine test_filterComboB


end module Test_Filterer_mod
